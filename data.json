{
    "project": {
        "name": "SmartJs",
        "version": "0.5.0",
        "url": "https://github.com/zhh77/smartjs",
        "navs": [
            {
                "name": "Home",
                "url": "https://github.com/zhh77/smartjs"
            },
            {
                "name": "Document",
                "url": "http://zhh77.github.io/smartjs/"
            },
            {
                "name": "Blog",
                "url": "http://www.cnblogs.com/zhh8077"
            },
            {
                "name": "SmartDoc",
                "url": "https://github.com/zhh77/smartDoc"
            }
        ]
    },
    "files": {
        "src\\base\\aop.js": {
            "name": "src\\base\\aop.js",
            "modules": {
                "AOP": 1
            },
            "classes": {
                "promiseEvent": 1,
                "EventArg": 1,
                "attachTrigger": 1,
                "EventArg(trigger)": 1,
                "flowController": 1,
                "EventArg(flowController)": 1
            },
            "fors": {
                "promiseEvent": 1,
                "attachTrigger": 1,
                "flowController": 1
            },
            "namespaces": {}
        },
        "src\\base\\base.js": {
            "name": "src\\base\\base.js",
            "modules": {
                "Base": 1
            },
            "classes": {
                "common": 1,
                "priorityList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\base\\deferred.js": {
            "name": "src\\base\\deferred.js",
            "modules": {
                "Promise": 1
            },
            "classes": {
                "Deferred": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\base\\oop.js": {
            "name": "src\\base\\oop.js",
            "modules": {
                "OOP": 1
            },
            "classes": {
                "klassBase": 1,
                "klass": 1,
                "factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\dataManager\\dataManager-table.js": {
            "name": "src\\dataManager\\dataManager-table.js",
            "modules": {
                "DataManager-Table": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\dataManager\\dataManager.js": {
            "name": "src\\dataManager\\dataManager.js",
            "modules": {
                "DataManager": 1
            },
            "classes": {
                "dataServices": 1,
                "baseDataService": 1,
                "dataManager": 1,
                "baseDataManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\dataManager\\filterBuilder.js": {
            "name": "src\\dataManager\\filterBuilder.js",
            "modules": {
                "FilterBuilder": 1
            },
            "classes": {
                "FilterBuilder": 1,
                "Operations": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "AOP": {
            "name": "AOP",
            "submodules": {},
            "classes": {
                "promiseEvent": 1,
                "EventArg": 1,
                "attachTrigger": 1,
                "EventArg(trigger)": 1,
                "flowController": 1,
                "EventArg(flowController)": 1
            },
            "fors": {
                "promiseEvent": 1,
                "attachTrigger": 1,
                "flowController": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\aop.js",
            "line": 879,
            "description": "面向切面编程的辅助模块\n\nFeartures : \n    1. promiseEvent ：基于promise和event机制的回调管理\n    2. trigger ：对象触发器\n    3. flowController ：流程/生命周期控制器\n\nUpdate Note：\n    + 2014.8.06 ：将priorityList应用到promiseEvent中\n    + 2014.6.13 ：trigger添加属性变化监听支持\n    + 2014.6.11 ：promiseEvent添加非阻塞模式\n    + 2014.5 ：Created"
        },
        "Base": {
            "name": "Base",
            "submodules": {},
            "classes": {
                "common": 1,
                "priorityList": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\base.js",
            "line": 472,
            "description": "SmartJS基础模块\n\nFeartures : \n    1. 基础公共方法\n    2. 基础公共对象\n\nUpdate Note：\n    + 2014.10.16 getObj和setObj支持array设置和获取\n    + 2014.8.06 加入priorityList\n    + 2014.5 ：Created"
        },
        "Promise": {
            "name": "Promise",
            "submodules": {},
            "classes": {
                "Deferred": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\deferred.js",
            "line": 15,
            "description": "Promise的实现对象，接口基本与Jquery相同，不依赖JQuery的时候使用;\n\nUpdate Note：\n    + 2014.10 ：Created"
        },
        "OOP": {
            "name": "OOP",
            "submodules": {},
            "classes": {
                "klassBase": 1,
                "klass": 1,
                "factory": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\oop.js",
            "line": 191,
            "description": "面向对象思想的辅助实现模块;\n\nFeartures : \n    1. klass ：类继承；实现执行指针，类常用方法，继承路径\n    2. factory ：对象/类工厂方法；\n\nUpdate Note：\n    + 2014.6 ：Created"
        },
        "DataManager": {
            "name": "DataManager",
            "submodules": {
                "DataManager-Table": 1
            },
            "classes": {
                "dataServices": 1,
                "baseDataService": 1,
                "dataManager": 1,
                "baseDataManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\dataManager\\dataManager.js",
            "line": 145,
            "description": "数据管理模块\n\nFeartures : \n    1. dataServices ：数据服务接口\n    2. dataManager ：基于策略的数据管理基类\n    3. dataPolicyManager ：数据策略管理器；\n\nUpdate Note：\n    + 2014.7 ：Created"
        },
        "DataManager-Table": {
            "name": "DataManager-Table",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager-table.js",
            "line": 1,
            "description": "针对于表类型的数据进行管理\n\nFeartures : \n    1. 提供CRUD接口\n    2. 内置状态控制\n\n\nUpdate Note：\n    + 2014.7 ：Created"
        },
        "FilterBuilder": {
            "name": "FilterBuilder",
            "submodules": {},
            "classes": {
                "FilterBuilder": 1,
                "Operations": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 419,
            "description": "过滤器生成器\n\nFeartures : \n    1. 编译字符串过滤，“name = @name and (age > @age and type = @type)”，生产过滤条件参数或者过滤方法\n    2. 参数过滤，以参数的方式全部构建\"=\"的方式构建查询方法\n    3. 方法过滤\n    4. 忽略null的条件\n    5. 自定义扩展过滤操作符\n    6. 条件&参数合并\n\nUpdate Note：\n    + 2014.7 ：Created"
        }
    },
    "classes": {
        "promiseEvent": {
            "name": "promiseEvent",
            "shortname": "promiseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 67,
            "description": "基于事件和promise的回调管理，类似于jquery的callbacks，但具有结果传递，优先级，事件参数，promise控制等功能；\n默认注册的事件都是按照优先级，依次执行，无论同步还是异步；但在非阻塞模式下，则事件不会等待上一个执行完毕（异步），\n直接回依次执行，只是在最后的结果中会等待所有的事件执行完毕之后才返回",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "promiseEvent的模式，可以混用；\n    1. 默认；event模式，所有的注册的事件，执行时，第一个事件参数为e（详细说明见promiseEvent-EventArg）\n    2. 'callback' : 回调模式; 与event模式对立，执行时不会添加事件参数e\n    2. 'once' : 全部事件执行一次，即有执行动作就销毁\n    3. 'noBlock' : 非阻塞模式；",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\t\r\n\t            //标准模式\r\n\t            var events = st.promiseEvent(),\r\n\t                result = [];\r\n\t\r\n\t            //注册事件\r\n\t            events.add('call1', function(e, text) {\r\n\t                result.push('call1');\r\n\t            });\r\n\t\r\n\t            //自定义priority注册事件\r\n\t            events.add('call2', function(e, text) {\r\n\t                result.push('call2');\r\n\t            },100);\r\n\t\r\n\t            //单once模式注册\r\n\t            events.add('call3', function(e, text) {\r\n\t                result.push('call3');\r\n\t            },'once');\r\n\t\r\n\t            //所有设置\r\n\t            events.add('call4', function(e, text) {\r\n\t                result.push('call4');\r\n\t            },50,'once');\r\n\t\r\n\t            //返回promise\r\n\t            events.add(\"promiseCall\", function(e, text) {\r\n\t                //异步的方法\r\n\t                setTimeout(function() {\r\n\t                    result.push('promiseCall');\r\n\t                    e.resolve();\r\n\t                },0);\r\n\t                return e.promise();\r\n\t            },20);\r\n\t\r\n\t            //回调中如果存在promise需要,st.when来获取结果\r\n\t            st.when(events.fire('test')).done(function(){\r\n\t                expect(result.join('-')).toBe('call2-call4-promiseCall-call1-call3');\r\n\t                \r\n\t            });\r\n\t        ",
                "\t\r\n\t            //已once模式创建事件管理\r\n\t            var onceCalls = st.promiseEvent(\"once\"),\r\n\t                result = [];\r\n\t\r\n\t            onceCalls.add(\"c1\", function {\r\n\t                result.push(\"c1\");\r\n\t            });\r\n\t            //执行之后即销毁\r\n\t            onceCalls.fire\r\n\t            expect(onceCalls.has('c1')).toBe(false);\r\n\t        ",
                "\t\r\n\t            var result = [],obj2 = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            }, \"callback\");\r\n\t\r\n\t            obj2.onBefore(\"test\", \"addBefore\", function(name) {\r\n\t                result.push('before-' + name);\r\n\t            }).on(\"test\", \"addAfter\", function(name) {\r\n\t                result.push('after-' + name)\r\n\t            });\r\n\t            obj2.test('bind');\r\n\t            expect(result.join(',')).toBe(\"before-bind,bind,after-bind\");\r\n\t        ",
                "\t\r\n\t            var pCalls = st.promiseEvent(),\r\n\t                result = [];\r\n\t\r\n\t            pCalls.add(\"c1\", function(e, name) {\r\n\t                //延迟100ms\r\n\t                setTimeout(function() {\r\n\t                    //完成promise,并返回结果\r\n\t                    e.resolve(name + ',resolve!');\r\n\t                }, 100);\r\n\t\r\n\t                //返回promise\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            //使用when来监控promiseEvent的执行，使用done来处理执行完毕的方法\r\n\t            $.when(pCalls.fire(\"call\")).done(function(data) {\r\n\t                expect(data).toBe('call,resolve!');\r\n\t                \r\n\t            });\r\n\t        ",
                "\t\r\n\t            //创建一个noBlock模式的promiseEvents;\r\n\t            var noBlockCalls = st.promiseEvent(\"noBlock\"),\r\n\t                result = [];\r\n\t\r\n\t            //第一个回调延迟100\r\n\t            noBlockCalls.add(\"c1\", function(e) {\r\n\t                setTimeout(function() {\r\n\t                    result.push('c1');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            //第二个正常执行\r\n\t            noBlockCalls.add(\"c2\", function(e) {\r\n\t                result.push('c2');\r\n\t            });\r\n\t\r\n\t            //第三个回调延迟50\r\n\t            noBlockCalls.add(\"c3\", function(e) {\r\n\t                setTimeout(function() {\r\n\t                    result.push('c3');\r\n\t                    e.resolve();\r\n\t                }, 50);\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            $.when(noBlockCalls.fire()).done(function(data) {\r\n\t                //最终执行顺序是c2-c3-c1\r\n\t                expect(result + '').toBe('c2,c3,c1');\r\n\t                \r\n\t            });\r\n\t        ",
                "\t\r\n\t            var resultCalls = st.promiseEvent\r\n\t            resultCalls.add(\"c1\", function(e) {\r\n\t                return \"c1\";\r\n\t            }).add(\"c2\", function(e) {\r\n\t                return e.result + \",c2\";\r\n\t            });\r\n\t            expect(resultCalls.fire).toBe('c1,c2');\r\n\t        "
            ],
            "exampleTitles": [
                "基础",
                "once模式",
                "callback模式",
                "promise示例",
                "非阻塞模式",
                "结果传递"
            ]
        },
        "EventArg": {
            "name": "EventArg",
            "shortname": "EventArg",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 178,
            "description": "promiseEvent中事件回调的EventArg(e)参数对象;通过EventArg可以对事件进行阻止冒泡、promise、事件删除还有结果传递等控制；\nEventArg针对上下文对象（比较trigger和flowController）下，具有的独立的方法；"
        },
        "attachTrigger": {
            "name": "attachTrigger",
            "shortname": "attachTrigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 352,
            "description": "给对象添加触发器功能,在目标对象上加入触发器功能，目标对象的方法就会具有方法和属性注入功能；所有注入方法使用promiseEvent管理\n目前有四种注入方式： \n1. before，前置注入，在目标方法执行之前执行；\n2. after，后置执行，在目标方法执行之后执行；\n3. round，环绕，将目标方法包装，自定义控制；\n4. error，错误，捕获reject的事件；",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "[object] 目标对象"
                },
                {
                    "name": "mode",
                    "description": "[string] 注入前置和后置所采用的promiseEvent的模式，具体见promsieEvent的add",
                    "optional": true
                },
                {
                    "name": "fnInterface",
                    "description": "；自定义接口方法；在使用attachTrigger方法后，会在target上附加一些控制方法，为了避免重名和控制对外的方法，使用fnInterface来自定义",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回附加上了trigger的对象;",
                "type": "Trigger"
            },
            "example": [
                "\t\r\n\t            var result = [], obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //注册前置\r\n\t            obj.onBefore(\"test\", \"addBefore\", function(e, name) {\r\n\t                result.push('before-' + name)\r\n\t            })\r\n\t            //注册后置\r\n\t            .on(\"test\", \"addAfter\", function(e, name) {\r\n\t                result.push('after-' + name)\r\n\t            });\r\n\t            //执行test方法\r\n\t            obj.test('bind');\r\n\t            //前后置正确触发\r\n\t            expect(result.join(',')).toBe(\"before-bind,bind,after-bind\");\r\n\t        ",
                "\t\r\n\t            var result = [], obj = st.attachTrigger({\r\n\t                test: {\r\n\t                    child: function(name) {\r\n\t                        result.push(name);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t            //注册子对象方法\r\n\t            obj.onBefore(\"test.child\", \"addBefore\", function(e, name) {\r\n\t                result.push('before-' + name)\r\n\t            }).on(\"test.child\", \"addAfter\", function(e, name) {\r\n\t                result.push('after-' + name)\r\n\t            });\r\n\t            obj.test.child('bind');\r\n\t            expect(result.join(',')).toBe(\"before-bind,bind,after-bind\");\r\n\t        ",
                "\t\r\n\t            var result = [], obj1 = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            }, {\r\n\t                //屏蔽trigger的on方法\r\n\t                on: null,\r\n\t                //将trigger的onBebefore方法名改成bind\r\n\t                onBefore: \"bind\"\r\n\t            })\r\n\t\r\n\t            obj1.bind(\"test\", \"addBefore\", function(e, name) {\r\n\t                result.push('before-' + name);\r\n\t            });\r\n\t\r\n\t            obj1.test('bind');\r\n\t\r\n\t            expect(obj1.onBefore).toBeUndefined\r\n\t            expect(obj1.on).toBeUndefined;\r\n\t            expect(result.join(',')).toBe(\"before-bind,bind\");\r\n\t        ",
                "\t\r\n\t            var result = [],obj2 = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            }, \"callback\");\r\n\t\r\n\t            obj2.onBefore(\"test\", \"addBefore\", function(name) {\r\n\t                result.push('before-' + name);\r\n\t            }).on(\"test\", \"addAfter\", function(name) {\r\n\t                result.push('after-' + name)\r\n\t            });\r\n\t            obj2.test('bind');\r\n\t            expect(result.join(',')).toBe(\"before-bind,bind,after-bind\");\r\n\t        ",
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    //在原始方法中使用jquery的deferred\r\n\t                    var e = $.Deferred();\r\n\t                    setTimeout(function() {\r\n\t                        result.push(name);\r\n\t                        e.resolve();\r\n\t                    }, 100);\r\n\t                    return e.promise();\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //前置promise\r\n\t            obj.onBefore('test', 'testBefore', function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    result.push(name + '-before');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            })\r\n\t\r\n\t            //后置promise\r\n\t            obj.on('test', 'testAfter', function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    result.push(name + '-after');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            })\r\n\t\r\n\t            $.when(obj.test('call')).done(function() {\r\n\t                expect(result.join(',')).toBe('call-before,call,call-after');\r\n\t                \r\n\t            })\r\n\t\r\n\t        ",
                "\t\r\n\t            var obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    var e = $.Deferred();\r\n\t                    setTimeout(function() {\r\n\t                        e.resolve(name + '-base');\r\n\t                    }, 100);\r\n\t                    return e.promise();\r\n\t                },\r\n\t                testReturn: function(name) {\r\n\t                    return name + \"-base\"\r\n\t                }\r\n\t            });\r\n\t\r\n\t            obj.on('test', 'testAfter', function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    e.resolve(e.result + '-after');\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            })\r\n\t\r\n\t            obj.on('testReturn', 'testAfter', function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    e.resolve(e.result + '-after');\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            })\r\n\t\r\n\t            $.when(obj.test('call')).done(function(data) {\r\n\t                expect(data).toBe('call-base-after');\r\n\t                $.when(obj.testReturn('call2')).done(function(data) {\r\n\t                    expect(data).toBe('call2-base-after');\r\n\t                    \r\n\t                });\r\n\t\r\n\t            });\r\n\t\r\n\t        ",
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: 1\r\n\t            });\r\n\t            //属性监听只有before，after两种方法注入类型，不支持round环绕模式。\r\n\t            //before：主要使用在做值变化的控制，比如是否需要更新，或者改变更新的值等等。\r\n\t            //after：在after则是无法干预值的变化，因此只是做监听使用；\r\n\t\r\n\t            //回调方法中有三个参数,事件参数e；更新的值value；原来的值oldValue\r\n\t            obj.onBefore('test', 'testBefore', function(e, value, oldValue) {\r\n\t                result.push(value + '-before-' + oldValue);\r\n\t            })\r\n\t\r\n\t            obj.on('test', 'testAfter', function(e, value, oldValue) {\r\n\t                result.push(value + '-after-' + oldValue);\r\n\t            })\r\n\t\r\n\t            expect(obj.test).toBe(1);\r\n\t\r\n\t            obj.test = 2;\r\n\t            //输出前后置监听\r\n\t            expect(result.join(',')).toBe('2-before-1,2-after-1');\r\n\t            expect(obj.test).toBe(2);\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "基本注册",
                "子对象注册",
                "自定义接口",
                "callback模式",
                "promise",
                "promise结果传递",
                "属性监听"
            ]
        },
        "EventArg(trigger)": {
            "name": "EventArg(trigger)",
            "shortname": "EventArg(trigger)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 517,
            "description": "trigger下的事件参数，由EventArg扩展而来",
            "extends": "EventArg"
        },
        "flowController": {
            "name": "flowController",
            "shortname": "flowController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 826,
            "description": "流程或者生命周期管理器。控制流程的走向，流程扩展，注入控制等等；FlowController是基于trigger封装，具有所有trigger的特性；",
            "is_constructor": 1,
            "params": [
                {
                    "name": "op",
                    "description": "参数设置 ：",
                    "type": "Object",
                    "props": [
                        {
                            "name": "flow",
                            "description": "流程对象",
                            "type": "Object"
                        },
                        {
                            "name": "order",
                            "description": "流程顺序",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "trigger",
                            "description": "trigger设置",
                            "type": "Bool|object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "mode",
                                    "description": "trigger的mode设置",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "iFace",
                                    "description": "trigger的接口方法设置",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mode",
                            "description": "流程的模式， \n    1. 默认为EventArg模式\n    2. 'simple', 简单模式不带流程中不带EventArg参数",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "返回流程控制器",
                "type": "FlowController"
            },
            "example": [
                "\t\r\n\t            //以widget简单的的生命周期为例\r\n\t            var result = [],flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        result.push(name, 'init');\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                //设定执行流程\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t            //执行构建div的流程\r\n\t            flow.boot(\"div\");\r\n\t\r\n\t            //正常输出init，render，complete三个流程\r\n\t            expect(result + '').toBe('div,init,render,complete');\r\n\t        ",
                "\t\r\n\t            //简单流程，流程中不带事件参数EventArg（对应trigger和promiseEvent的callback模式）\r\n\t            var result=[], flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(name, op) {\r\n\t                        result.push(name, 'init');\r\n\t                    },\r\n\t                    render: function(name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"],\r\n\t                //简单模式（同promiseEvent mode设置）\r\n\t                mode: \"simple\"\r\n\t            })\r\n\t\r\n\t            flow.boot(\"boot\");\r\n\t            expect(result + '').toBe('boot,init,render,complete');\r\n\t        ",
                "\t\r\n\t            var result = [], promiseFlow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        setTimeout(function() {\r\n\t                            result.push(name, 'init');\r\n\t                            e.resolve();\r\n\t                        }, 100)\r\n\t                        return e.promise();\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t\r\n\t            $.when(promiseFlow.boot(\"div\")).done(function() {\r\n\t                expect(result + '').toBe('div,init,render,complete');\r\n\t                \r\n\t            })\r\n\t        ",
                "\t\r\n\t            //异步的流程，使用trigger\r\n\t            var result = [], triggerFlow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        //模拟异步\r\n\t                        setTimeout(function() {\r\n\t                            result.push(name, 'init');\r\n\t                            e.resolve();\r\n\t                        }, 100)\r\n\t                        return e.promise();\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"],\r\n\t                trigger: true\r\n\t            });\r\n\t\r\n\t            triggerFlow.onBefore(\"init\", \"initBefore\", function(e, name, op) {\r\n\t                setTimeout(function() {\r\n\t                    result.push('initBefore');\r\n\t                    //停止流程\r\n\t                    e.end().resolve();\r\n\t                }, 100)\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            $.when(triggerFlow.boot(\"div\")).done(function() {\r\n\t                //执行了注入事件initBefore后停止流程\r\n\t                expect(result + '').toBe('initBefore');\r\n\t                \r\n\t            })\r\n\t        ",
                "\t\r\n\t            //异步的流程，使用trigger\r\n\t            var result = [], triggerFlow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        //模拟异步\r\n\t                        setTimeout(function() {\r\n\t                            result.push(name, 'init');\r\n\t                            e.resolve();\r\n\t                        }, 100)\r\n\t                        return e.promise();\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"],\r\n\t                trigger: true\r\n\t            });\r\n\t\r\n\t            //在init之前注入\r\n\t            triggerFlow.onBefore(\"init\", \"initBefore\", function(e, name, op) {\r\n\t                result.push('initBefore');\r\n\t            });\r\n\t\r\n\t            //在init之后注入异步\r\n\t            triggerFlow.on(\"init\", \"initAfter\", function(e, name, op) {\r\n\t                setTimeout(function() {\r\n\t                    result.push('initAfter');\r\n\t                    e.resolve();\r\n\t                }, 100)\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            //使用when来捕获异步的流程执行结果\r\n\t            $.when(triggerFlow.boot(\"div\")).done(function() {\r\n\t                expect(result + '').toBe('initBefore,div,init,initAfter,render,complete');\r\n\t                \r\n\t            })\r\n\t        ",
                "\t\r\n\t            var result=[], flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        setTimeout(function() {\r\n\t                            result.push(name, 'init');\r\n\t                            e.resolve();\r\n\t                        }, 100)\r\n\t                        return e.promise();\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"],\r\n\t                trigger: {\r\n\t                    //设置trigger的模式，同trigger的mode\r\n\t                    mode: \"callback\",\r\n\t                    //接口设置，将on设置成on\r\n\t                    iFace: {\r\n\t                        on: \"bind\"\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t\r\n\t            flow.bind('init', 'initAfter', function(name, op) {\r\n\t                result.push(name + '-initAfter');\r\n\t            })\r\n\t\r\n\t            $.when(flow.boot('boot')).done(function() {\r\n\t                expect(result + '').toBe('boot,init,boot-initAfter,render,complete');\r\n\t                \r\n\t            });\r\n\t        ",
                "\t\r\n\t            var result = [], flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        setTimeout(function() {\r\n\t                            e.resolve(e.result + '-init');\r\n\t                        }, 100)\r\n\t                        return e.promise();\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        e.resolve(e.result + '-render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        e.resolve(e.result + '-complete');\r\n\t                    }\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"],\r\n\t                trigger: true\r\n\t            });\r\n\t\r\n\t            flow.onBefore(\"init\", \"initBefore\", function(e, name, op) {\r\n\t                setTimeout(function() {\r\n\t                    e.resolve(name + '-initBefore');\r\n\t                }, 100)\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            flow.onBefore(\"init\", \"initBefore2\", function(e, name, op) {\r\n\t                e.resolve(e.result + '-initBefore2');\r\n\t            });\r\n\t\r\n\t            flow.on(\"init\", \"initAfter\", function(e, name, op) {\r\n\t                e.resolve(e.result + '-initAfter');\r\n\t            });\r\n\t\r\n\t\r\n\t            $.when(flow.boot('boot')).done(function(result) {\r\n\t                expect(result + '').toBe('boot-initBefore-initBefore2-init-initAfter-render-complete');\r\n\t                \r\n\t            })\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "基础使用",
                "简单模式",
                "promise示例",
                "promise示例2",
                "trigger示例",
                "trigger示例2",
                "值传递"
            ]
        },
        "EventArg(flowController)": {
            "name": "EventArg(flowController)",
            "shortname": "EventArg(flowController)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 879,
            "description": "flowController下的事件参数，由EventArg(trigger)扩展而来，具有EventArg(trigger)的所有特性;\n其中stop方法为结束当前流程节点；",
            "extends": "EventArg(trigger)"
        },
        "common": {
            "name": "common",
            "shortname": "common",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Base",
            "namespace": "",
            "file": "src\\base\\base.js",
            "line": 35,
            "description": "基础方法"
        },
        "priorityList": {
            "name": "priorityList",
            "shortname": "priorityList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Base",
            "namespace": "",
            "file": "src\\base\\base.js",
            "line": 472,
            "description": "权重列表,根据权重的由大到小进入插入。\n具有两种item模式：\n    1. 默认，正常item，手动设置priority\n    2. self，读取item的priority属性",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "item模式",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "defaultPriority",
                    "description": "item模式",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\t\r\n\t            var list = st.priorityList,\r\n\t                result = [];\r\n\t\r\n\t            //添加项\r\n\t            list.add(1).add(0).add(10, 10).add(5, 5).add(-1, -1);\r\n\t\r\n\t            //10为第一个\r\n\t            expect(list.at(0)).toBe(10);\r\n\t\r\n\t\r\n\t            //按优先级大到小循环\r\n\t            list.each(function(item) {\r\n\t                result.push(item);\r\n\t            })\r\n\t\r\n\t            expect(result + '').toBe('10,5,1,0,-1');\r\n\t\r\n\t            result = [];\r\n\t\r\n\t            //删除 item为1的项\r\n\t            list.remove(function(item) {\r\n\t                if (item === 1)\r\n\t                //结束匹配\r\n\t                    return \"done\";\r\n\t            })\r\n\t\r\n\t            //按优先级小到大循环\r\n\t            list.each(true, function(item) {\r\n\t                result.push(item);\r\n\t            })\r\n\t\r\n\t            expect(result + '').toBe('-1,0,5,10');\r\n\t        "
            ],
            "exampleTitles": [
                "base"
            ]
        },
        "Deferred": {
            "name": "Deferred",
            "shortname": "Deferred",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Promise",
            "namespace": "",
            "file": "src\\base\\deferred.js",
            "line": 15,
            "description": "Deferred对象，非依赖jquery下加载使用",
            "is_constructor": 1
        },
        "klassBase": {
            "name": "klassBase",
            "shortname": "klassBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOP",
            "namespace": "",
            "file": "src\\base\\oop.js",
            "line": 17,
            "description": "klass的基类对象"
        },
        "klass": {
            "name": "klass",
            "shortname": "klass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOP",
            "namespace": "",
            "file": "src\\base\\oop.js",
            "line": 110,
            "description": "js类创建，具有执行指针功能(解决了多级继承域对象的问题)\n\n此外提供两种全局扩展方式： \n    1. 基于原形链的基类扩展，使用st.conf('oop-KlassBase')，可以取到基类对象进行扩展\n    2. 在类初始化时，对实例化的对象进行扩展，可以使用st.onKlassInit对象进行添加扩展方法。st.onKlassInit 是promiseEvent对象，st.onKlassInit(obj,config);",
            "is_constructor": 1,
            "extends": "klassBase",
            "params": [
                {
                    "name": "name",
                    "description": "类名称",
                    "type": "String"
                },
                {
                    "name": "prop",
                    "description": "类的属性和方法",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父类",
                    "type": "Klass|object|function",
                    "optional": true
                },
                {
                    "name": "config",
                    "description": "扩展参数",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回类",
                "type": "Klass"
            },
            "example": [
                "\t\r\n\t            var user = st.klass(\"user\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ',' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            var user1 = new user('roy'),\r\n\t            //执行方法与实例化等效\r\n\t                user2 = user('tracy');\r\n\t\r\n\t            expect(user1.name).toBe('roy');\r\n\t            expect(user1.say('hello')).toBe('roy,hello');\r\n\t            expect(user2.name).toBe('tracy');\r\n\t            expect(user2.say('hello')).toBe('tracy,hello');\r\n\t        ",
                "\t\r\n\t            var user = st.klass(\"user\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ',' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            var user1 = st.klass(\"user1\", {\r\n\t                name: 'user1',\r\n\t                //自初始化方法为：klassInit，在实例化时执行\r\n\t                klassInit: function  {\r\n\t                }\r\n\t            }, user);\r\n\t\r\n\t            var roy = user1('roy');\r\n\t\r\n\t            expect(roy.name).toBe('user1');\r\n\t            expect(roy.say('hello')).toBe('user1,hello');\r\n\t        ",
                "\t\r\n\t            var user = st.klass(\"user\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ',' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            expect(user.fn._$klass).toBe(true);\r\n\t            expect(user.fn._$kName).toBe('user');\r\n\t            expect(user.fn._$inheirts + '').toBe('user');\r\n\t        ",
                "\t\r\n\t            //创建一个class\r\n\t            var User = st.klass('user', {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ',' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //实例化一个User\r\n\t            var xiaoming = new User('小明');\r\n\t\r\n\t            //方法实例化\r\n\t            var xiaozhang = User('小张');\r\n\t\r\n\t            //多级继承例子。在多级继承中有一种场景每个子类方法都会调用父类的方法，而方法中又会使用到当前对象的属性，则问题就来了；\r\n\t            //如果是采用的parent.xxx然后传递this下的属性值过去，则没太大的问题。backbone就采用的这种。\r\n\t            //另外像base.js直接改写原始方法，将父对象封入闭包中，也无问题。只是这种限制比较大，只能调用父类的同名方法。\r\n\t            //而dojo采用的是this.parent.xxx.call(this)的方式，则就会悲剧了，死循环就来了。\r\n\t            //导致这样的原因就是将this带入parent方法后，父类又执行this.parent。而这是this则是子类的对象，那么方法就只会不停的调用parent的方法。\r\n\t            //在smartjs中klass调用父类方法由callBae这个方法来代理，同时使用指针来记录方法的执行轨迹，这样保证了从子到根的各级调用\r\n\t\r\n\t            var user2 = st.klass('user2', {\r\n\t                say: function (text) {\r\n\t                    //调用父类\r\n\t                    return this.callBase('say', [text]) + \"-lv2\";\r\n\t                }\r\n\t            }, User);\r\n\t\r\n\t            var user3 = st.klass('user3', {\r\n\t                say: function (text) {\r\n\t                    //调用父类\r\n\t                    return this.callBase('say', [text]) + \"-lv3\";\r\n\t                }\r\n\t            }, user2);\r\n\t\r\n\t            var user4 = st.klass('user4', {\r\n\t                say: function (text) {\r\n\t                    //调用父类\r\n\t                    return this.callBase('say', [text]) + \"-lv4\";\r\n\t                }\r\n\t            }, user3);\r\n\t\r\n\t            var roy = new user4('roy');\r\n\t\r\n\t            //继承路径\r\n\t            expect(roy._$inheirts + '').toBe('user4,user3,user2,user');\r\n\t\r\n\t            //依次执行到根，正确将当前的this对象的值输出\r\n\t            expect(roy.say('hello')).toBe('roy,hello-lv2-lv3-lv4');\r\n\t\r\n\t            //从3级开始执行\r\n\t            expect(roy.callBase('say', ['hello'])).toBe(\"roy,hello-lv2-lv3\");\r\n\t\r\n\t            //指定从user开始执行\r\n\t            expect(roy.callBase('say', 'user', ['hello'])).toBe(\"roy,hello\");\r\n\t\r\n\t            //上向略过2级执行\r\n\t            expect(roy.callBase('say', 2, ['hello'])).toBe(\"roy,hello-lv2\");\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "实例化",
                "类继承",
                "继承特性检查",
                "多级继承"
            ]
        },
        "factory": {
            "name": "factory",
            "shortname": "factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOP",
            "namespace": "",
            "file": "src\\base\\oop.js",
            "line": 191,
            "description": "factory并不只是指的是工厂模式。在factory要求定义一个基础对象，这个对象可以是基类，也可以是模板对象或者是接口。然后factory就已此基础对象为基础，其他添加或者创建的对象，继承或者是复制基础对象的属性和方法。factory在提供一系列方法来对这些对象做控制。\n       factory经过简单的处理可以实现工厂、外观、模板等设计模式。",
            "is_constructor": 1,
            "extends": "klass",
            "params": [
                {
                    "name": "name",
                    "description": "工厂名称",
                    "type": "String"
                },
                {
                    "name": "base",
                    "description": "基类对象，所有在工厂中添加的对象都以base为基础",
                    "type": "Object"
                },
                {
                    "name": "proto",
                    "description": "工厂的扩展属性和方法对象",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "工厂的类型； \n1. 默认:类实例化后的对象；\n2. class：类对象，未实例化；\n3. merge：对象复制合并",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "initDefault",
                    "description": "是否将base设置成为默认的对象；当使用factory.get找不到对象时返回默认对象",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回创建的工厂对象",
                "type": "Factory"
            },
            "example": [
                "\t\r\n\t            //一个widget工厂\r\n\t            var widgetFactory = st.factory('wdigetfactory', {\r\n\t                //widget类型\r\n\t                type: '',\r\n\t                //widget的渲染方法\r\n\t                render: function (id) {\r\n\t                    return this.type + ':' + id;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //添加一个input\r\n\t            widgetFactory.add('input', {\r\n\t                type: 'input'\r\n\t            })\r\n\t            //添加一个number类型的input\r\n\t            var num = widgetFactory.add('number', {\r\n\t                type: 'input[number]'\r\n\t            }, 'input')\r\n\t\r\n\t            expect(num.render('txtNum')).toBe(\"input[number]:txtNum\");\r\n\t        ",
                "\t\r\n\t            var f1 = st.factory({\r\n\t                name: 'classMode',\r\n\t                //设置class类型\r\n\t                type: 'class',\r\n\t                base: {\r\n\t                    klassInit: function (name) {\r\n\t                        this.name = name;\r\n\t                    }\r\n\t\r\n\t                }\r\n\t            });\r\n\t\r\n\t            var c1 = f1.add('c1', {\r\n\t                type: 'c1'\r\n\t            });\r\n\t\r\n\t            expect(c1.fn).toBeDefined\r\n\t            //需要初始化\r\n\t            var c = new c1('class1');\r\n\t            expect(c.type).toBe(\"c1\");\r\n\t            expect(c.name).toBe(\"class1\");\r\n\t        ",
                "\t\r\n\t            var f2 = st.factory({\r\n\t                name: 'copyMode',\r\n\t                //设置merge类型\r\n\t                type:'merge',\r\n\t                //设置默认模式\r\n\t                initDefault:true,\r\n\t                base:{\r\n\t                    name: 'copy',\r\n\t                    project :{\r\n\t                    name: 'smartjs'\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t\r\n\t        var c = f2.add('c1', {\r\n\t            name: 'c1',\r\n\t            project: {\r\n\t                role: 'pm'\r\n\t            }\r\n\t        });\r\n\t\r\n\t        expect(f2.find.name).toBe(\"copy\");\r\n\t        expect(c.name).toBe(\"c1\");\r\n\t        expect(c.project.name).toBe(\"smartjs\");\r\n\t        expect(c.project.role).toBe(\"pm\");\r\n\t    "
            ],
            "exampleTitles": [
                "继承",
                "类继承模式",
                "对象合并模式"
            ]
        },
        "dataServices": {
            "name": "dataServices",
            "shortname": "dataServices",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 29,
            "description": "数据服务管理；定义了数据服务的接口和通用操作方法；不能直接使用，必须创建具体类型的数据服务； \n数据服务的定义就比较广了，可以是具体的对象方式locaStorage，IndexDB，或者是一些行为ajax，comet，websocket；也可以是根据业务规则定义的rest，cache等；",
            "is_constructor": 1,
            "extends": "factory",
            "example": [
                "\t\r\n\t            //cache数组\r\n\t            var _cache = [];\r\n\t\r\n\t            //注册cache的数据服务\r\n\t            st.dataServices.add(\"cache\", {\r\n\t                //实现search接口方法\r\n\t                search: function(op) {\r\n\t                    var result, filter = op.filter;\r\n\t                    //过滤数据\r\n\t                    result = filter ? _cache.filter(filter) : _cache;\r\n\t\r\n\t                    //执行成功之后的方法\r\n\t                    op.success && op.success(result);\r\n\t                },\r\n\t                //实现update接口方法\r\n\t                update: function(op) {\r\n\t                    var filter = op.filter,\r\n\t                    //测试使用，只更新第一条匹配数据\r\n\t                        data = st.isArray(data) ? data[0] : data;\r\n\t\r\n\t                    if (filter) {\r\n\t                        //查找数据进行更新\r\n\t                        st.each(_cache, function(i, item) {\r\n\t                            if (filter(item)) {\r\n\t                                _cache[i] = data;\r\n\t                                return false;\r\n\t                            }\r\n\t                        })\r\n\t                    } else {\r\n\t                        _cache = op.data || [];\r\n\t                    }\r\n\t\r\n\t                    op.success && op.success(op.data);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //更新cache的数据\r\n\t            st.dataServices.update({\r\n\t                dsType: 'cache',\r\n\t                data: [{\r\n\t                    name: 'user1',\r\n\t                    age: 20\r\n\t                }, {\r\n\t                    name: 'user2',\r\n\t                    age: 30\r\n\t                }],\r\n\t                success: function(result) {\r\n\t                    expect(_cache.length).toBe(2);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //查询server的数据\r\n\t            st.dataServices.search({\r\n\t                dsType: 'cache',\r\n\t                filter : function(data){\r\n\t                    return data.name === 'user1'\r\n\t                },\r\n\t                success: function(result) {\r\n\t                    expect(result.length).toBe(1);\r\n\t                    expect(result[0].age).toBe(20);\r\n\t                    \r\n\t                }\r\n\t            });\r\n\t        "
            ],
            "exampleTitles": [
                "demo"
            ]
        },
        "baseDataService": {
            "name": "baseDataService",
            "shortname": "baseDataService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 79,
            "description": "数据服务基类"
        },
        "dataManager": {
            "name": "dataManager",
            "shortname": "dataManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 118,
            "description": "数据管理器工厂； 更多数据管理的例子见smartjs其他数据管理项",
            "is_constructor": 1,
            "extends": "factory",
            "example": [
                "\t\r\n\t            //添加一个简单的table类型的数据管理\r\n\t            st.dataManager.add(\"Table\", {\r\n\t                init: function {\r\n\t                    this._data = [];\r\n\t                },\r\n\t                //dm内置查询\r\n\t                _innerSearch: function(conf) {\r\n\t                    return conf.filter ? this._data.filter(conf.filter) : this._data;\r\n\t                },\r\n\t                //dm内置更新\r\n\t                _innerUpdate: function(conf) {\r\n\t                    var isUpdate, _data = this._data,\r\n\t                        data = conf.data,\r\n\t                        updateData;\r\n\t\r\n\t                    if (conf.filter) {\r\n\t                        updateData = st.isArray(data) ? data[0] : data;\r\n\t                        //筛选数据\r\n\t                        _data.forEach(function(item, i) {\r\n\t                            if (conf.filter(item)) {\r\n\t                                _data[i] = updateData;\r\n\t                                isUpdate = true;\r\n\t                                return false;\r\n\t                            }\r\n\t                        })\r\n\t                        isUpdate || _data.push(updateData);\r\n\t                    } else {\r\n\t                        this._data = data || [];\r\n\t                    }\r\n\t                    return data;\r\n\t                },\r\n\t                //判断数据是否为空\r\n\t                checkEmpty: function(data, conf) {\r\n\t                    return data === undefined || data.length === 0;\r\n\t                },\r\n\t                //清空数据\r\n\t                clear: function() {\r\n\t                    this._data = [];\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //创建一个tabel的manager\r\n\t            var dm1 = st.dataManager.create(\"Table\");\r\n\t\r\n\t            //找不到匹配的数据，则插入新数据\r\n\t            dm1._innerUpdate({\r\n\t                data: {\r\n\t                    name: 'user3',\r\n\t                    age: 10\r\n\t                },\r\n\t                //方法过滤器\r\n\t                filter: function(user) {\r\n\t                    return user.name == 'user3';\r\n\t                }\r\n\t            });\r\n\t            expect(dm1._data.length).toBe(1);\r\n\t            expect(dm1._data[0].name).toBe('user3');\r\n\t\r\n\t            //更新数据\r\n\t            dm1._innerUpdate({\r\n\t                data: {\r\n\t                    name: 'user3',\r\n\t                    age: 40\r\n\t                },\r\n\t                //方法过滤器\r\n\t                filter: function(user) {\r\n\t                    return user.name == 'user3';\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //查询数据\r\n\t            var result = dm1._innerSearch({\r\n\t                //方法过滤器\r\n\t                filter: function(user) {\r\n\t                    return user.name == 'user3';\r\n\t                }\r\n\t            });\r\n\t            expect(result.length).toBe(1);\r\n\t            expect(result[0].age).toBe(40);\r\n\t        "
            ],
            "exampleTitles": [
                "demo"
            ]
        },
        "baseDataManager": {
            "name": "baseDataManager",
            "shortname": "baseDataManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 145,
            "description": "数据管理器基类"
        },
        "FilterBuilder": {
            "name": "FilterBuilder",
            "shortname": "FilterBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "FilterBuilder",
            "namespace": "",
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 25,
            "description": "过滤生成器对象；可以使用：条件字符串；参数；方法来构建； \n条件字符串的过滤操作见[Operations](Operations.html)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "三种类型： \n1. {string}, 查询字符串\n2. {object}, 参数对象\n3. {function}, 过滤方法",
                    "type": "String|function|object"
                }
            ],
            "return": {
                "description": "返回过滤生成器对象",
                "type": "FilterBuilder"
            },
            "example": [
                "\n\t\t//定义数据\n\t\t\tvar data = [\n\t\t\t\t\t{name: \"roy\",age: 30,role: \"sa\",project: \"smartjs\"},\n\t\t\t\t\t{name: \"roy\",age: 30,role: \"coder\",project: \"smartdoc\"},\n\t\t\t \t\t{name: \"coder1\", age: 20, role: \"coder\", project: \"smartjs\"}\n\t\t\t];\n\n\t\t//查询字符串,{age > @age}用{}包含的条件表示当@age为null的时候，忽略此条件\n\t\tvar str = \"{age > @age} and (role = @sa or role = @coder) and {project = @project}\";\n\t\t\t\n\t\t\t//创建字符串过滤器\n\t\t\tvar strFilter = st.filterBuilder(str);\n\t\t\t\n\t\t\t//生成过滤方法\n\t\t\tvar fnFilterCoder = strFilter.buildFn({\n\t\t\t\tcoder : 'coder',\n\t\t\t});\n\n\t\t\t//过滤所有coder\n\t\t\tvar coders = data.filter(fnFilterCoder);\n\n\t\t\texpect(coders.length).toBe(2);\n\t\t\texpect(coders[0].name).toBe('roy');\n\t\t\texpect(coders[1].name).toBe('coder1');\n\n\t\t\t//再次生成smartjs项目年纪大于20的coder或sa\n\t\t\tvar filterFn = strFilter.buildFn({\n\t\t\t\tage : 20,\n\t\t\t\tcoder : 'coder',\n\t\t\t\tsa : 'sa',\n\t\t\t\tproject : 'smartjs'\n\t\t\t});\n\t\t\t\n\t\t\tvar member = data.filter(filterFn);\n\t\t\texpect(member.length).toBe(1);\n\t\t\texpect(member[0].name).toBe('roy');\n\t\t\t\n\t\t\t\n\t\t\t//创建过滤器\n\t\t\tvar paramFilter = st.filterBuilder();\n\n\t\t\t//根据参数创建过滤方法\n\t\t\tvar filterFn2 = paramFilter.buildFn({\n\t\t\t\tname : 'coder1'\n\t\t\t});\n\n\t\t\tvar coder1 = data.filter(filterFn2);\n\n\t\t\texpect(coder1.length).toBe(1);\n\t\t\texpect(coder1[0].name).toBe('coder1');\n\t\t\t"
            ]
        },
        "Operations": {
            "name": "Operations",
            "shortname": "Operations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "FilterBuilder",
            "namespace": "",
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 419,
            "description": "针对过滤器条件字符串的条件过滤操作；预设了基础操作；另外可以通过<code>st.extendOperation(operation,checkFn)</code>进行扩展和重写"
        }
    },
    "classitems": [
        {
            "file": "src\\base\\aop.js",
            "line": 103,
            "description": "清空所有事件回调",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var events = st.promiseEvent\r\n\t\r\n\t            //添加回调\r\n\t            events.add('call1', function(e, text) {});\r\n\t            events.add('call2', function(e, text) {});\r\n\t\r\n\t            //回调事件总数为2\r\n\t            expect(events.len).toBe(2);\r\n\t\r\n\t            //清除events下面注册的事件\r\n\t            events.clear();\r\n\t\r\n\t            //回调事件总数为0\r\n\t            expect(events.len()).toBe(0);\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 114,
            "description": "添加事件回调方法",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "事件回调名",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "事件回调方法",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "权重;预设为0，可以通过配置调整",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "mode",
                    "description": "回调模式：\"once\":执行一次",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            //标准模式\r\n\t            var events = st.promiseEvent(),\r\n\t                result = [];\r\n\t\r\n\t            //注册事件\r\n\t            events.add('call1', function(e, text) {\r\n\t                result.push('call1');\r\n\t            });\r\n\t\r\n\t            //自定义priority注册事件\r\n\t            events.add('call2', function(e, text) {\r\n\t                result.push('call2');\r\n\t            },100);\r\n\t\r\n\t            //单once模式注册\r\n\t            events.add('call3', function(e, text) {\r\n\t                result.push('call3');\r\n\t            },'once');\r\n\t\r\n\t            //所有设置\r\n\t            events.add('call4', function(e, text) {\r\n\t                result.push('call4');\r\n\t            },50,'once');\r\n\t\r\n\t            //返回promise\r\n\t            events.add(\"promiseCall\", function(e, text) {\r\n\t                //异步的方法\r\n\t                setTimeout(function() {\r\n\t                    result.push('promiseCall');\r\n\t                    e.resolve();\r\n\t                },0);\r\n\t                return e.promise();\r\n\t            },20);\r\n\t\r\n\t            //回调中如果存在promise需要,st.when来获取结果\r\n\t            st.when(events.fire('test')).done(function(){\r\n\t                expect(result.join('-')).toBe('call2-call4-promiseCall-call1-call3');\r\n\t                \r\n\t            });\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 142,
            "description": "删除事件回调方法",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "事件回调名",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var events = st.promiseEvent\r\n\t\r\n\t            //注册事件\r\n\t            events.add('call1', function(e, text) {});\r\n\t\r\n\t            //删除事件\r\n\t            events.remove('call1');\r\n\t\r\n\t            expect(events.len).toBe(0);\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 156,
            "description": "根据上下文对象执行回调;fire方法的增强",
            "itemtype": "method",
            "name": "fireWith",
            "params": [
                {
                    "name": "context",
                    "description": "上下文对象",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                },
                {
                    "name": "argHandle",
                    "description": "参数处理方法，可以对eventarg进行修改；例如：argHandle(e)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回执行结果",
                "type": "Object|promise"
            },
            "example": [
                "\t\r\n\t            var events = st.promiseEvent,\r\n\t                target = {\r\n\t                    name: 'target'\r\n\t                };\r\n\t\r\n\t            //注册事件\r\n\t            events.add('call1', function(e, text) {\r\n\t                return this.name + '-' + text + '-' + e.extend\r\n\t            });\r\n\t\r\n\t            //使用fireWith执行\r\n\t            var result = events.fireWith(target, ['test'], function(e) {\r\n\t                //扩展事件参数；只会在这一次的fire中生效\r\n\t                e.extend = function() {\r\n\t                    return 'extend';\r\n\t                }\r\n\t            })\r\n\t\r\n\t            expect(result).toBe('target-test-extend');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 184,
            "description": "停止所有后续事件执行",
            "itemtype": "method",
            "name": "stopPropagation",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var calls = st.promiseEvent,\r\n\t                result = [];\r\n\t\r\n\t            calls.add(\"c1\", function(e) {\r\n\t                //停止执行\r\n\t                e.stopPropagation\r\n\t            }).add(\"c2\", function() {\r\n\t                result.push(\"c2\");\r\n\t            });\r\n\t            calls.fire();\r\n\t            expect(result.length).toBe(0);\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 194,
            "description": "完成契约",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "result",
                    "description": "返回结果",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            obj.onBefore('test', 'testBefore', function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    result.push(name + '-before1');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            })\r\n\t\r\n\t            obj.onBefore('test', 'testBefore2', function(e, name) {\r\n\t                result.push(name + '-before2');\r\n\t            })\r\n\t\r\n\t            obj.on('test', 'testBefore2', function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    result.push(name + '-after');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            })\r\n\t\r\n\t            $.when(obj.test('call')).done(function() {\r\n\t                expect(result.join(',')).toBe('call-before1,call-before2,call,call-after');\r\n\t                \r\n\t            })\r\n\t        ",
                "\t\r\n\t            var pCalls = st.promiseEvent(),\r\n\t                result = [];\r\n\t\r\n\t            pCalls.add(\"c1\", function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    e.resolve(name + '-c1');\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            pCalls.add(\"c2\", function(e, name) {\r\n\t                return e.result + '-c2';\r\n\t            });\r\n\t\r\n\t            pCalls.add(\"c3\", function(e, name) {\r\n\t                setTimeout(function() {\r\n\t                    e.resolve(e.result + '-c3');\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            $.when(pCalls.fire(\"call\")).done(function(data) {\r\n\t                expect(data).toBe('call-c1-c2-c3');\r\n\t                \r\n\t            });\r\n\t        ",
                "\t\r\n\t            var noBlockCalls2 = st.promiseEvent(),\r\n\t                result = [];\r\n\t            //第一个回调延迟100\r\n\t            noBlockCalls2.add(\"c1\", function(e) {\r\n\t                setTimeout(function() {\r\n\t                    result.push('c1');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                //在返回promise的时候，指定noBlock模式\r\n\t                return e.promise(\"noBlock\");\r\n\t            });\r\n\t            //第二个正常执行\r\n\t            noBlockCalls2.add(\"c2\", function(e) {\r\n\t                result.push('c2');\r\n\t            });\r\n\t            //第三个回调延迟100\r\n\t            noBlockCalls2.add(\"c3\", function(e) {\r\n\t                setTimeout(function() {\r\n\t                    result.push('c3');\r\n\t                    e.resolve();\r\n\t                }, 100);\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            $.when(noBlockCalls2.fire()).done(function(data) {\r\n\t                //最终执行顺序是c2-c1-c3\r\n\t                expect(result + '').toBe('c2,c1,c3');\r\n\t                \r\n\t            });\r\n\t        "
            ],
            "exampleTitles": [
                "aop",
                "aop",
                "aop"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 207,
            "description": "拒绝契约，在任何一个事件中reject都会停止所有后续promiseEvent的执行",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "err",
                    "description": "拒绝参数",
                    "type": "Object"
                }
            ],
            "example": [
                "\t\r\n\t            var pCalls = st.promiseEvent(),\r\n\t                result = [];\r\n\t\r\n\t            pCalls.add(\"c1\", function(e, name) {\r\n\t                //延迟100ms\r\n\t                setTimeout(function() {\r\n\t                    //拒绝promise,并返回结果\r\n\t                    e.reject(name + ',reject!');\r\n\t                }, 100);\r\n\t\r\n\t                //返回promise\r\n\t                return e.promise();\r\n\t            });\r\n\t\r\n\t            //使用when来监控promiseEvent的执行，使用fail捕获reject\r\n\t            $.when(pCalls.fire(\"call\")).fail(function(data) {\r\n\t                expect(data).toBe('call,reject!');\r\n\t                \r\n\t            });\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 216,
            "description": "删除当前事件；与promiseEvent.add的'once'模式，不同在于可以手动进行控制",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var calls = st.promiseEvent,\r\n\t                result = [];\r\n\t\r\n\t            calls.add(\"onceTest\", function(e) {\r\n\t                //删除\"onceTest\"这个事件；\r\n\t                e.remove\r\n\t            });\r\n\t            //执行后才会触发删除\r\n\t            calls.fire();\r\n\t\r\n\t            //\"onceTest\"已经不在calls中\r\n\t            expect(calls.has(\"onceTest\")).toBe(false);\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 287,
            "description": "判断是否存在事件回调",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "事件回调名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否存在",
                "type": "Boolean"
            },
            "example": [
                "\t\r\n\t            var calls = st.promiseEvent\r\n\t\r\n\t            calls.add(\"call1\", function(e) {});\r\n\t\r\n\t            //判断是否注册了\"call1\"的event\r\n\t            expect(calls.has(\"call1\")).toBeTruthy;\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 311,
            "description": "获取注册的事件长度/数",
            "itemtype": "method",
            "name": "len",
            "return": {
                "description": "注册的事件长度/数",
                "type": "Number"
            },
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 320,
            "description": "执行回调",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                },
                {
                    "name": "argHandle",
                    "description": "参数处理方法，可以对eventarg进行修改；例如：argHandle(e)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回执行结果",
                "type": "Object"
            },
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 522,
            "description": "阻止默认的方法执行；",
            "itemtype": "method",
            "name": "preventDefault",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            obj.onBefore('test', 'testBefore', function(e, name) {\r\n\t                result.push(name + '-before1');\r\n\t                //阻止前置后续的事件&阻止默认方法\r\n\t                e.preventDefault\r\n\t            })\r\n\t\r\n\t            obj.onBefore('test', 'testBefore2', function(e, name) {\r\n\t                result.push(name + '-before2');\r\n\t            })\r\n\t\r\n\t            obj.on('test', 'testAfter', function(e, name) {\r\n\t                result.push(name + '-after');\r\n\t            })\r\n\t\r\n\t            obj.test('call');\r\n\t            expect(result.join(',')).toBe('call-before1,call-before2,call-after');\r\n\t\r\n\t        ",
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            obj.onBefore('test', 'testBefore', function(e, name) {\r\n\t                result.push(name + '-before1');\r\n\t                //阻止前置后续的事件&阻止默认方法\r\n\t                e.stopPropagation.preventDefault\r\n\t            })\r\n\t\r\n\t            obj.onBefore('test', 'testAfter', function(e, name) {\r\n\t                result.push(name + '-before2');\r\n\t            })\r\n\t\r\n\t            obj.on('test', 'testBefore2', function(e, name) {\r\n\t                result.push(name + '-after');\r\n\t            })\r\n\t\r\n\t            obj.test('call');\r\n\t            //最终输出前置call-before1和后置\r\n\t            expect(result.join(',')).toBe('call-before1,call-after');\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "aop",
                "aop"
            ],
            "class": "EventArg(trigger)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 534,
            "description": "停止当前方法执行和后置所有事件；在属性监听时，则阻止赋值；",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            obj.onBefore('test', 'testBefore', function(e, name) {\r\n\t                result.push(name + '-before1');\r\n\t                //停止执行\r\n\t                e.stop\r\n\t            })\r\n\t\r\n\t            obj.onBefore('test', 'testBefore2', function(e, name) {\r\n\t                result.push(name + '-before2');\r\n\t            })\r\n\t\r\n\t            obj.on('test', 'testAfter', function(e, name) {\r\n\t                result.push(name + '-after');\r\n\t            })\r\n\t\r\n\t            obj.test('call');\r\n\t            //最终只输入前置call-before1\r\n\t            expect(result.join(',')).toBe('call-before1');\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg(trigger)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 661,
            "description": "注册手动的触发的Handler",
            "itemtype": "event",
            "name": "onHandler",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 手动触发器名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                },
                {
                    "name": "priority",
                    "description": "[number] 权重设置，同PrmiseEvent",
                    "optional": true
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var obj = st.attachTrigger({\r\n\t                test: function(text) {\r\n\t                    //手动执行handler\r\n\t                    return this.fireHandler('handler', [text, \"run\"]);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //注册handler1\r\n\t            obj.onHandler('handler', 'handler1', function(e, text, state) {\r\n\t                //返回结果\r\n\t                return text + '-' + state + '-' + 'handler1';\r\n\t            })\r\n\t\r\n\t            //注册handler2\r\n\t            obj.onHandler('handler', 'handler2', function(e, text, state) {\r\n\t                //接受handler1结果\r\n\t                return e.result + '-' + 'handler2';\r\n\t            })\r\n\t\r\n\t            expect(obj.test('test')).toBe('test-run-handler1-handler2');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 677,
            "description": "执行手动触发的Handler",
            "itemtype": "method",
            "name": "fireHandler",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 手动触发器名称"
                },
                {
                    "name": "args",
                    "description": "[array] 执行参数数组"
                }
            ],
            "return": {
                "description": "[object] 执行结果"
            },
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 688,
            "description": "注册[后置的]事件方法;注册后置和对象注入",
            "itemtype": "event",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "目标方法或者属性名称;[object]类型时为对象注入",
                    "type": "String|object"
                },
                {
                    "name": "trName",
                    "description": "注册事件方法的名称|属性名称；对象注入模式下，会自动拼接成trName-[名称|属性名]-[注入方式]",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "注册事件方法;对象注入模式下，[object]类型才会生效",
                    "type": "Function|object"
                },
                {
                    "name": "priority",
                    "description": "[number] 权重设置，同PrmiseEvent",
                    "optional": true
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [], obj = st.attachTrigger({\r\n\t                test: {\r\n\t                    child: function(name) {\r\n\t                        result.push(name);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t            //注册子对象方法\r\n\t            obj.onBefore(\"test.child\", \"addBefore\", function(e, name) {\r\n\t                result.push('before-' + name)\r\n\t            }).on(\"test.child\", \"addAfter\", function(e, name) {\r\n\t                result.push('after-' + name)\r\n\t            });\r\n\t            obj.test.child('bind');\r\n\t            expect(result.join(',')).toBe(\"before-bind,bind,after-bind\");\r\n\t        ",
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //对象注入\r\n\t            obj.on({\r\n\t                //简单的注入后置方法\r\n\t                test: function(e, name) {\r\n\t                    result.push('after');\r\n\t                },\r\n\t                //注入前置&注入参数设置\r\n\t                'test before': {\r\n\t                    //注入方法\r\n\t                    fn: function(e, name) {\r\n\t                        result.push('before');\r\n\t                    },\r\n\t                    //注入权重\r\n\t                    priority: 100,\r\n\t                    //注入模式\r\n\t                    mode: 'once'\r\n\t                }\r\n\t            }, \"onObject\");\r\n\t\r\n\t            obj.test('call');\r\n\t            expect(result.join(',')).toBe('before,call,after');\r\n\t        ",
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: 1\r\n\t            });\r\n\t\r\n\t            obj.onBefore('test', 'testBefore', function(e, value) {\r\n\t                result.push(value + '-before');\r\n\t                //停止方法，阻止赋值行为\r\n\t                e.stop\r\n\t            })\r\n\t\r\n\t            obj.on('test', 'testAfter', function(e, value) {\r\n\t                result.push(value + '-after');\r\n\t            })\r\n\t\r\n\t            obj.test = 2;\r\n\t            //最终更新失败，输出前置的监听内容\r\n\t            expect(result.join(',')).toBe('2-before');\r\n\t            expect(obj.test).toBe(1);\r\n\t        "
            ],
            "exampleTitles": [
                "基础注入",
                "对象注入",
                "属性监听"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 720,
            "description": "注册前置的事件方法",
            "itemtype": "event",
            "name": "onBefore",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                },
                {
                    "name": "priority",
                    "description": "[number] 权重设置，同PrmiseEvent",
                    "optional": true
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 734,
            "description": "注册环绕触发事件",
            "itemtype": "event",
            "name": "onRound",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],obj3 = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //注册环绕事件，事件方法参数第一为fn为原方法，后面的为执行参数\r\n\t            obj3.onRound(\"test\", \"roundTest\", function(fn, name) {\r\n\t                result.push('before');\r\n\t                //执行原有方法\r\n\t                fn(name);\r\n\t                result.push('after');\r\n\t            });\r\n\t\r\n\t            obj3.test('round');\r\n\t            expect(result.join(',')).toBe(\"before,round,after\");\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 747,
            "description": "注册错误捕获事件，当执行reject的时候触发",
            "itemtype": "event",
            "name": "onError",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var testError = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    var e = $.Deferred();\r\n\t                    setTimeout(function() {\r\n\t                        //拒绝契约\r\n\t                        e.reject('reject');\r\n\t                    }, 100);\r\n\t                    return e.promise();\r\n\t                }\r\n\t            });\r\n\t            //注册错误捕获事件\r\n\t            testError.onError(\"test\", \"triggerError\", function(err, name) {\r\n\t                expect(err).toBe('reject');\r\n\t                expect(name).toBe('call');\r\n\t                \r\n\t            })\r\n\t            testError.test('call');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 761,
            "description": "注销注册的后置事件方法",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string|array] 注册事件方法的名称：\n        1. 空为清除所有\n        2. 字符串为单个\n        3. 数组为多个",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t            //注册前置testBefore\r\n\t            obj.onBefore('test', 'testBefore', function(e, name) {\r\n\t                result.push(name + '-before1');\r\n\t            })\r\n\t\r\n\t            //注册前置testBefore2\r\n\t            obj.onBefore('test', 'testBefore2', function(e, name) {\r\n\t                result.push(name + '-before2');\r\n\t            })\r\n\t\r\n\t            //注销多个前置\r\n\t            obj.offBefore('test', ['testBefore', 'testBefore2']);\r\n\t\r\n\t            //注册后置testAfter\r\n\t            obj.on('test', 'testAfter', function(e, name) {\r\n\t                result.push(name + '-after');\r\n\t            })\r\n\t\r\n\t            //注销单个后置\r\n\t            obj.off('test', 'testAfter');\r\n\t\r\n\t            obj.test('call');\r\n\t            expect(result.join(',')).toBe('call');\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 777,
            "description": "注销注册的前置事件方法",
            "itemtype": "method",
            "name": "offBefore",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string|array] 注册事件方法的名称：\n        1. 空为清除所有\n        2. 字符串为单个\n        3. 数组为多个",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 792,
            "description": "扩展对象；（在使用触发器注册后，原始方法不会直接在目标对象下，因此使用obj.test = xx的方式来扩展会替换到所有的注册事件）",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "prop",
                    "description": "[object] 目标方法或者属性名称"
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [], obj = st.attachTrigger({\r\n\t                test: function(name) {\r\n\t                    result.push(name);\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //注册后置testAfter\r\n\t            obj.on('test', 'testAfter', function(e, name) {\r\n\t                result.push('after');\r\n\t            });\r\n\t\r\n\t            //扩展替换test\r\n\t            obj.extend({\r\n\t                test : function(name){\r\n\t                    result.push(name + ':extend')\r\n\t                }\r\n\t            });\r\n\t\r\n\t            obj.test('test');\r\n\t\r\n\t            expect(result.join('-')).toBe('test:extend-after');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 861,
            "description": "已手动设定流程开始的节点启动流程",
            "itemtype": "method",
            "name": "bootWithStart",
            "params": [
                {
                    "name": "start",
                    "description": "流程开始的节点",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "返回执行结果或者promise（异步）",
                "type": "Object|promise"
            },
            "example": [
                "\t\r\n\t            var result = [],flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        result.push(name, 'init');\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                //设定执行流程\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t\r\n\t            //从render阶段开始构建div\r\n\t            flow.bootWithStart('render', [\"div\"]);\r\n\t\r\n\t            //略过了render阶段\r\n\t            expect(result + '').toBe('render,complete');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "flowController",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 886,
            "description": "结束流程。无论是注册的事件方法还是流程方法全部结束",
            "itemtype": "method",
            "name": "end",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        result.push(name, 'init');\r\n\t                        //进入cancel流程\r\n\t                        if (name === 'cancel')\r\n\t                            e.next('cancel');\r\n\t                    },\r\n\t                    cancel: function(e) {\r\n\t                        result.push('cancel');\r\n\t                        e.end\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        //判断是否存在传递结果\r\n\t                        e.result && result.push(e.result);\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                //设定执行流程\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t            flow.boot(\"cancel\");\r\n\t            expect(result + '').toBe('cancel,init,cancel');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 900,
            "description": "拒绝契约同时设置流程状态为失败，结束流程",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "comment",
                    "description": "拒绝的说明或参数",
                    "type": "Object"
                }
            ],
            "example": [
                "\t\r\n\t            var flowReject = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        setTimeout(function() {\r\n\t                            e.reject('init-reject');\r\n\t                        }, 100)\r\n\t                        return e.promise();\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        e.resolve(e.result + '-render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        e.resolve(e.result + '-complete');\r\n\t                    }\r\n\t                },\r\n\t                order: [\"init\", \"render\", \"complete\"],\r\n\t                trigger: true\r\n\t            });\r\n\t\r\n\t            $.when(flowReject.boot('boot')).fail(function(err) {\r\n\t                expect(err + '').toBe('init-reject');\r\n\t                \r\n\t            });\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 909,
            "description": "手动指定下一个流程，（指定的流程可以不在order配置中）",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "nextNode",
                    "description": "下一个流程名称",
                    "type": "String"
                },
                {
                    "name": "pass",
                    "description": "下个流程执行完毕略过的流程数（相对于order）",
                    "type": "Number"
                },
                {
                    "name": "args",
                    "description": "下个流程的参数，只在该流程节点有效，在之后就会恢复成原始参数，如想改变后续参数，请使用changeArgs方法",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name, op) {\r\n\t                        result.push(name, 'init');\r\n\t                        //input的进入buildInput流程\r\n\t                        if (name === 'input')\r\n\t                        //指定进入buildInput，同时指定的参数\r\n\t                            e.next(\"buildInput\", [op.type]);\r\n\t                    },\r\n\t                    buildInput: function(e, type) {\r\n\t                        result.push('buildInput');\r\n\t                        //返回传递结果\r\n\t                        return type;\r\n\t                    },\r\n\t                    render: function(e, name, op) {\r\n\t                        //判断是否存在传递结果\r\n\t                        e.result && result.push(e.result);\r\n\t                        result.push('render');\r\n\t                    },\r\n\t                    complete: function(e, name, op) {\r\n\t                        result.push('complete');\r\n\t                    }\r\n\t                },\r\n\t                //设定执行流程\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t\r\n\t            //执行构建input的流程，设置input的type\r\n\t            flow.boot(\"input\", {\r\n\t                type: 'text'\r\n\t            });\r\n\t\r\n\t            //除正常流程外，在init后进入buildInput流程\r\n\t            expect(result + '').toBe('input,init,buildInput,text,render,complete');\r\n\t        "
            ],
            "exampleTitles": [
                "aop"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 928,
            "description": "改变后续流程的执行参数",
            "itemtype": "method",
            "name": "changeArgs",
            "params": [
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                }
            ],
            "example": [
                "\t\r\n\t            var result = [],flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name) {\r\n\t                        result.push(name,'init');\r\n\t                        //改变下个流程的方法参数\r\n\t                        e.changeArgs(['text']);\r\n\t                    },\r\n\t                    render: function(e,type) {\r\n\t                        result.push('render',type);\r\n\t                        //恢复原始参数\r\n\t                        e.recoverArgs\r\n\t                    },\r\n\t                    complete: function(e, name) {\r\n\t                        result.push('complete',name);\r\n\t                    }\r\n\t                },\r\n\t                //设定执行流程\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t\r\n\t            flow.boot(\"input\");\r\n\t\r\n\t            expect(result + '').toBe('input,init,render,text,complete,input');\r\n\t        "
            ],
            "exampleTitles": [
                "changeArg"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 935,
            "description": "恢复原始执行参数，下个流程中生效，与changeArgs方法对应",
            "itemtype": "method",
            "name": "recoverArgs",
            "chainable": 1,
            "example": [
                "\t\r\n\t            var result = [],flow = st.flowController({\r\n\t                flow: {\r\n\t                    init: function(e, name) {\r\n\t                        result.push(name,'init');\r\n\t                        //改变下个流程的方法参数\r\n\t                        e.changeArgs(['text']);\r\n\t                    },\r\n\t                    render: function(e,type) {\r\n\t                        result.push('render',type);\r\n\t                        //恢复原始参数\r\n\t                        e.recoverArgs\r\n\t                    },\r\n\t                    complete: function(e, name) {\r\n\t                        result.push('complete',name);\r\n\t                    }\r\n\t                },\r\n\t                //设定执行流程\r\n\t                order: [\"init\", \"render\", \"complete\"]\r\n\t            });\r\n\t\r\n\t            flow.boot(\"input\");\r\n\t\r\n\t            expect(result + '').toBe('input,init,render,text,complete,input');\r\n\t        "
            ],
            "exampleTitles": [
                "recoverArgs"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1014,
            "description": "启动流程，",
            "itemtype": "method",
            "name": "boot",
            "params": [
                {
                    "name": "流程参数",
                    "description": "",
                    "type": "Argument"
                }
            ],
            "return": {
                "description": "返回执行结果或者promise（异步）",
                "type": "Object|promise"
            },
            "class": "flowController",
            "module": "AOP"
        },
        {
            "file": "src\\base\\base.js",
            "line": 16,
            "description": "SmartJS避免混淆的方法;\nSmartJS默认在使用window._smartJS；同时会判断window.st是否被占用，如果没占用的话，会同样映射到window.st;\nnoConflict接受一个字符名(window下)或者对象，smartjs会同步到这个对象",
            "itemtype": "method",
            "name": "noConflict",
            "params": [
                {
                    "name": "extreme",
                    "description": "扩展名或者是对象",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "smartJS对象",
                "type": "_smartJS"
            },
            "example": [
                "\t\r\n\t            //与jquery的$合并\r\n\t            window._smartJS.noConflict($);\r\n\t            expect($.__smartJs).toBeDefined\r\n\t        "
            ],
            "exampleTitles": [
                "base"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 40,
            "description": "SmartJS的配置公共参数方法",
            "itemtype": "method",
            "name": "conf",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "conf",
                    "description": "参数",
                    "type": "Object"
                },
                {
                    "name": "mode",
                    "description": "参数设置模式，默认\n                      1. merge,合并模式；\n                      2. mix,混入模式；只应用原来没有的设置\n                      3. replace,完全替换原来设置",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'merge'"
                },
                {
                    "name": "deep",
                    "description": "是否深度拷贝拷贝，当mode为'merge'和'mix'有效",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\t\r\n\t           st.conf('testConfig',{\r\n\t                name : 'test'\r\n\t           });\r\n\t           var config = st.conf('testConfig');\r\n\t           expect(config).toBeDefined\r\n\t           expect(config.name).toBe('test');\r\n\t\r\n\t           //扩展\r\n\t           st.conf('testConfig',{\r\n\t                type : 'config'\r\n\t           });\r\n\t\r\n\t           config = st.conf('testConfig');\r\n\t           expect(config.name).toBe('test');\r\n\t           expect(config.type).toBe('config');\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "base"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 72,
            "description": "将argument转换成array",
            "itemtype": "method",
            "name": "sliceArgs",
            "params": [
                {
                    "name": "args",
                    "description": "argument对象",
                    "type": "Function"
                },
                {
                    "name": "[start",
                    "description": "= 0]  开始位置",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[array] 返回转换的数组"
            },
            "example": [
                "\t\r\n\t            function test {\r\n\t                return st.sliceArgs(arguments, 1);\r\n\t            }\r\n\t            expect(test(1, 2, 3, 4).join(',')).toBe('2,3,4');\r\n\t        "
            ],
            "exampleTitles": [
                "base"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 171,
            "description": "合并默认数据方法,将obj中不空的内容从defObj中复制",
            "itemtype": "method",
            "name": "mergeObj",
            "params": [
                {
                    "name": "deep",
                    "description": "是否深度合并",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "obj",
                    "description": "合并对象",
                    "type": "Function"
                },
                {
                    "name": "defObj",
                    "description": "默认对象",
                    "type": "Function"
                },
                {
                    "name": "exclude",
                    "description": "排除合并的设置",
                    "type": "Array|function",
                    "optional": true
                },
                {
                    "name": "isMix",
                    "description": "排除合并的设置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[function] 返回合并之后的对象；如obj不为空时返回obj，否则返回新对象"
            },
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 198,
            "description": "合并默认数据方法,将obj中不空的内容从defObj中复制",
            "itemtype": "method",
            "name": "mix",
            "params": [
                {
                    "name": "deep",
                    "description": "是否深度合并",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "obj",
                    "description": "合并对象",
                    "type": "Function"
                },
                {
                    "name": "defObj",
                    "description": "默认对象",
                    "type": "Function"
                },
                {
                    "name": "exclude",
                    "description": "排除合并的设置",
                    "type": "Array|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "[function] 返回合并之后的对象；如obj不为空时返回obj，否则返回新对象"
            },
            "example": [
                "\t\r\n\t            var person = {\r\n\t                name: \"piter\",\r\n\t                age: 10,\r\n\t                child: [{\r\n\t                    name: 'lily'\r\n\t                }]\r\n\t            };\r\n\t\r\n\t            var obj = {\r\n\t                name: 'a'\r\n\t            };\r\n\t\r\n\t            st.mix(true, obj, person);\r\n\t\r\n\t            expect(obj.child).toBeDefined\r\n\t            expect(obj.age).toBe(10);\r\n\t            expect(obj.name).toBe('a');\r\n\t\r\n\t            //obj.child[0].name = 'tracy';\r\n\t            //expect(person.child[0].name).toBe('lily');\r\n\t        ",
                "\t\r\n\t            var obj = {\r\n\t                name: 'a',\r\n\t                age: 10,\r\n\t                project: {\r\n\t                    name: \"project1\",\r\n\t                    state: 'testing'\r\n\t                }\r\n\t            };\r\n\t\r\n\t            var mObj = st.mix(true, {\r\n\t                age: 20\r\n\t            }, obj, [\"age\", \"project.state\"]);\r\n\t\r\n\t            expect(mObj.age).toBe(20);\r\n\t            expect(mObj.name).toBe(\"a\");\r\n\t            expect(mObj.project.state).toBeUndefined;\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "对象深度混入",
                "混入-排除模式"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 215,
            "description": "合并多个对象",
            "itemtype": "method",
            "name": "mergeMulti",
            "params": [
                {
                    "name": "deep",
                    "description": "是否深度合并",
                    "type": "Boolean"
                },
                {
                    "name": "合并的对象集合",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "isMix",
                    "description": "是否为mix模式，默认是merge模式",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "exclude",
                    "description": "排除合并的设置",
                    "type": "Array|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回合并对象",
                "type": "Object"
            },
            "example": [
                "\t\r\n\t            var obj0 = {\r\n\t                name: 'obj0'\r\n\t            },\r\n\t            obj1 = {\r\n\t                name: 'obj1',\r\n\t                age: 10\r\n\t            },\r\n\t            obj2 = {\r\n\t                name: 'obj2',\r\n\t                sex : 'male'\r\n\t            }\r\n\t\r\n\t            //使用mix方式合并多个对象\r\n\t            var mObj = st.mergeMulti(true,[obj0,obj1,obj2],true,[\"age\"]);\r\n\t\r\n\t            expect(mObj.age).toBeUndefined\r\n\t            expect(mObj.name).toBe(\"obj0\");\r\n\t            expect(mObj.sex).toBe(\"male\");\r\n\t        "
            ],
            "exampleTitles": [
                "base"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 241,
            "description": "在目标对象方法中注入方法，返回结果",
            "itemtype": "method",
            "name": "injectFn",
            "params": [
                {
                    "name": "target",
                    "description": "注入的目标对象",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "注入的方法名",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "注入方法",
                    "type": "Function"
                },
                {
                    "name": "before",
                    "description": "是否前置注入，默认后置",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "stopOnFalse",
                    "description": "是否开启返回值为false停止后续执行",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\t\r\n\t            var result = [],\r\n\t                target = {\r\n\t                    test: function(arr) {\r\n\t                        arr.push(\"test\");\r\n\t                    }\r\n\t                };\r\n\t\r\n\t\r\n\t            function fn(arr) {\r\n\t                arr.push(\"inject\");\r\n\t            }\r\n\t\r\n\t            //向target注入方法fn\r\n\t            st.injectFn(target, \"test\", fn);\r\n\t\r\n\t            target.test(result);\r\n\t\r\n\t            //结果执行注入函数fn\r\n\t            expect(result + '').toBe('test,inject');\r\n\t        ",
                "\t\r\n\t            var result = [],\r\n\t                target = {\r\n\t                    test: function(arr) {\r\n\t                        arr.push(\"test\");\r\n\t                    }\r\n\t                };\r\n\t\r\n\t\r\n\t            function fn(arr) {\r\n\t                arr.push(\"inject\");\r\n\t            }\r\n\t\r\n\t            st.injectFn(target, \"test\", fn, true);\r\n\t\r\n\t            target.test(result);\r\n\t            expect(result + '').toBe('inject,test');\r\n\t        ",
                "\t\r\n\t            var result = [],\r\n\t                target = {\r\n\t                    test: function(arr) {\r\n\t                        arr.push(\"test\");\r\n\t\r\n\t                    }\r\n\t                };\r\n\t\r\n\t\r\n\t            function fn(arr) {\r\n\t                arr.push(\"inject\");\r\n\t                return false;\r\n\t            }\r\n\t\r\n\t            st.injectFn(target, \"test\", fn, true, true);\r\n\t\r\n\t            target.test(result);\r\n\t            expect(result + '').toBe('inject');\r\n\t        "
            ],
            "exampleTitles": [
                "方法注入（默认后置）",
                "前置方法注入",
                "stopOnFalse模式"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 261,
            "description": "合并方法，返回结果",
            "itemtype": "method",
            "name": "mergeFn",
            "params": [
                {
                    "name": "fn",
                    "description": "目标方法",
                    "type": "Function"
                },
                {
                    "name": "mergeFn",
                    "description": "合并方法，合并的方法始终在后执行",
                    "type": "Function"
                },
                {
                    "name": "stopOnFalse",
                    "description": "是否开启返回值为false停止后续执行",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[function] 返回合并之后的新方法"
            },
            "example": [
                "\t\r\n\t            var result = [],\r\n\t                fn1, fn2, fn3, fn4;\r\n\t\r\n\t            fn1 = function(arr) {\r\n\t                arr.push(\"fn1\");\r\n\t            }\r\n\t\r\n\t            fn2 = function(arr) {\r\n\t                arr.push(\"fn2\");\r\n\t            }\r\n\t\r\n\t            fn3 = st.mergeFn(fn1, fn2);\r\n\t\r\n\t            fn3(result);\r\n\t            expect(result + '').toBe('fn1,fn2');\r\n\t        ",
                "\t\r\n\t            var result = [],\r\n\t                fn1, fn2, fn3;\r\n\t\r\n\t            //合并方法1\r\n\t            fn1 = function(arr) {\r\n\t                    arr.push(\"fn1\");\r\n\t                    return false;\r\n\t                }\r\n\t                //合并方法2\r\n\t            fn2 = function(arr) {\r\n\t                arr.push(\"fn2\");\r\n\t            }\r\n\t\r\n\t            //将fn1和fn2合并成一个新方法fn3，并开启stopOnFalse\r\n\t            fn3 = st.mergeFn(fn1, fn2, true);\r\n\t\r\n\t            fn3(result);\r\n\t            //最终因为fn1执行返回false，fn2不执行，\r\n\t            expect(result + '').toBe('fn1');\r\n\t        "
            ],
            "exampleTitles": [
                "方法合并",
                "stopOnFalse模式"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 320,
            "description": "获取对象的属性或方法，支持命名空间方式获取",
            "itemtype": "method",
            "name": "getObj",
            "params": [
                {
                    "name": "target",
                    "description": "目标对象",
                    "type": "Object"
                },
                {
                    "name": "ns",
                    "description": "属性名称或者相对于target的路径，使用\".\"进行分割",
                    "type": "String"
                },
                {
                    "name": "root",
                    "description": "是否从根开始，默认从target子开始；从根开始则忽略ns的第一级",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回获取的属性或者方法"
            },
            "example": [
                "\t\r\n\t            var user1 = {\r\n\t                name: \"user\",\r\n\t                project1: {\r\n\t                    level:2,\r\n\t                    role: \"sa\"\r\n\t                },\r\n\t                friends: ['user2','user3']\r\n\t            };\r\n\t\r\n\t            expect(st.getObj(user1, \"name\")).toBe('user');\r\n\t            expect(st.getObj(user1, \"project1.level\")).toBe(2);\r\n\t            expect(st.getObj(user1, \"friends[1]\")).toBe('user3');\r\n\t            expect(st.getObj(user1, \"a\")).toBe(null);\r\n\t        "
            ],
            "exampleTitles": [
                "base"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 346,
            "description": "设置对象的属性或方法，支持命名空间方式设置",
            "itemtype": "method",
            "name": "setObj",
            "params": [
                {
                    "name": "target",
                    "description": "目标对象",
                    "type": "Object"
                },
                {
                    "name": "ns",
                    "description": "属性名称或者相对于target的路径，使用\".\"进行分割",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "设置的值",
                    "type": "Object"
                },
                {
                    "name": "mode",
                    "description": "值设置的方式,目标对象和值都为object类型有效，默认为替换；\"mix\" : 混入合并默认值；\"merge\" : 复制合并值；",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "root",
                    "description": "是否从根开始，默认从target子开始；从根开始则忽略ns的第一级",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回获取的属性或者方法"
            },
            "example": [
                "\t\r\n\t            var user1 = {\r\n\t                name: \"user\",\r\n\t                project1: {\r\n\t                    role: \"sa\"\r\n\t                },\r\n\t                friends: ['user2']\r\n\t            };\r\n\t\r\n\t            //简单赋值\r\n\t            st.setObj(user1, \"age\", 10);\r\n\t\r\n\t            //子对象赋值\r\n\t            st.setObj(user1, \"project1.level\", 1);\r\n\t\r\n\t            //设置数组\r\n\t            st.setObj(user1, \"friends[1]\", 'user3');\r\n\t\r\n\t            //构建不存在的project2对象\r\n\t            st.setObj(user1, \"project2.role\", 'pm');\r\n\t\r\n\t            expect(user1.age).toBe(10);\r\n\t            expect(user1.project1.level).toBe(1);\r\n\t            expect(user1.friends.length).toBe(2);\r\n\t            expect(user1.project2).toBeDefined\r\n\t            expect(user1.project2.role).toBe(\"pm\");\r\n\t        ",
                "\t\r\n\t            var user1 = {\r\n\t                name: \"user\",\r\n\t                project1: {\r\n\t                    role: \"sa\"\r\n\t                },\r\n\t                friends: ['user2']\r\n\t            };\r\n\t\r\n\t            st.setObj(user1, \"user1.age\", 20, true);\r\n\t\r\n\t            expect(user1.age).toBe(20);\r\n\t        ",
                "\t\r\n\t            var user1 = {\r\n\t                name: \"user\",\r\n\t                project1: {\r\n\t                    role: \"sa\"\r\n\t                },\r\n\t                friends: ['user2']\r\n\t            };\r\n\t\r\n\t            st.setObj(user1, \"project1\", {\r\n\t                level: 2,\r\n\t                status: 'coding'\r\n\t            }, 'merge');\r\n\t\r\n\t            expect(user1.project1.level).toBe(2);\r\n\t            expect(user1.project1.status).toBe('coding');\r\n\t        ",
                "\t\r\n\t            var user1 = {\r\n\t                name: \"user\",\r\n\t                project1: {\r\n\t                    role: \"sa\"\r\n\t                },\r\n\t                friends: ['user2']\r\n\t            };\r\n\t\r\n\t            st.setObj(user1, \"user1.project1\", {\r\n\t                level: 3,\r\n\t                status: 'testing',\r\n\t                module: 'core'\r\n\t            }, 'mix', true);\r\n\t\r\n\t            expect(user1.project1.level).toBe(3);\r\n\t            expect(user1.project1.status).toBe('testing');\r\n\t            expect(user1.project1.module).toBe('core');\r\n\t        "
            ],
            "exampleTitles": [
                "base",
                "root mode",
                "merge mode",
                "mix and root mode"
            ],
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 426,
            "description": "编码方法",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "content",
                    "description": "编码内容或者是获取编码内容打的方法",
                    "type": "String|function"
                },
                {
                    "name": "type",
                    "description": "编码类型;\n                        1. html:html编码\n                        2. url:url编码",
                    "type": "String"
                }
            ],
            "return": {
                "description": "编码后的内容",
                "type": "String"
            },
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 448,
            "description": "文本格式化方法",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "tmpl",
                    "description": "模板内容",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "填充的数据对象",
                    "type": "Object"
                },
                {
                    "name": "encodeType",
                    "description": "编码类型，html,url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "格式化后的文本内容",
                "type": "String"
            },
            "class": "common",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 494,
            "description": "执行回调",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "添加对象",
                    "type": "Object"
                },
                {
                    "name": "priority",
                    "description": "权重",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "priorityList",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 544,
            "description": "执行回调",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "filter",
                    "description": "过滤函数，返回值：\n 1. {boolean}：是否匹配；\n 2. 'break' : 结束匹配；\n 3. 'done' : 完成匹配",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "priorityList",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 578,
            "description": "循环列表方法，默认根据priority大到小",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "desc",
                    "description": "是否降序，即根据priority由小到大",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "循环处理函数",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "priorityList",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 614,
            "description": "根据序号获取item",
            "itemtype": "method",
            "name": "at",
            "params": [
                {
                    "name": "index",
                    "description": "序号",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回item",
                "type": "Object"
            },
            "class": "priorityList",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 624,
            "description": "清除所有项",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "priorityList",
            "module": "Base"
        },
        {
            "file": "src\\base\\base.js",
            "line": 634,
            "description": "获取列表长度",
            "itemtype": "method",
            "name": "len",
            "return": {
                "description": "列表长度",
                "type": "Number"
            },
            "class": "priorityList",
            "module": "Base"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 76,
            "description": "解决递延对象，并根据给定的参数调用任何完成的回调函数",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "result",
                    "description": "解决传递的结果",
                    "type": "Object"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 84,
            "description": "拒绝延迟对象，并根据给定的参数调用任何失败的回调函数。",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "arg",
                    "description": "拒绝传递的参数",
                    "type": "Object"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 92,
            "description": "返回契约",
            "itemtype": "method",
            "name": "promise",
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 99,
            "description": "返回契约状态；\n    1. pending: 未完成状态。 \n    2. resolved: 解决状态。 \n    3. rejected: 拒绝的状态。",
            "itemtype": "method",
            "name": "state",
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 109,
            "description": "当延迟成功时调用一个函数或者数组函数。",
            "itemtype": "method",
            "name": "done",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数或者数组函数",
                    "type": "Function|array"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 117,
            "description": "当延迟失败时调用一个函数或者数组函数。",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数或者数组函数",
                    "type": "Function|array"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 125,
            "description": "当递延对象是解决或拒绝时被调用添加处理程序；",
            "itemtype": "method",
            "name": "always",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数或者数组函数",
                    "type": "Function|array"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 133,
            "description": "添加处理程序被调用时，递延对象得到解决或者拒绝；",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "doneCallback",
                    "description": "成功回调函数",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "失败回调函数或者数组函数",
                    "type": "Function"
                },
                {
                    "name": "priority",
                    "description": "权重；优先级",
                    "type": "Number"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\deferred.js",
            "line": 151,
            "description": "捕获promise的方法，使用st.when调用；",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "result",
                    "description": "单个判断对象或者一组（参数组）判断对象",
                    "type": "Object|args"
                }
            ],
            "class": "Deferred",
            "module": "Promise"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 22,
            "description": "调用原型链方法",
            "itemtype": "method",
            "name": "callProto",
            "params": [
                {
                    "name": "name",
                    "description": "需要执行的原型链方法名",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回执行结果"
            },
            "example": [
                "\t\r\n\t            var Animate = st.klass(\"Animate\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ':' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            var chicken = new Animate('chicken');\r\n\t            chicken.say = function (text) {\r\n\t                //调用原型链方法\r\n\t                return '[Bird]' + this.callProto('say', [text]);\r\n\t            };\r\n\t\r\n\t            expect(chicken.say('hello')).toBe('[Bird]chicken:hello');\r\n\t        "
            ],
            "exampleTitles": [
                "执行原型链方法"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 35,
            "description": "获取基类对象",
            "itemtype": "method",
            "name": "getBase",
            "params": [
                {
                    "name": "baseName",
                    "description": "基类名称,不设置则返回父类",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回基类"
            },
            "example": [
                "\t\r\n\t            var Animate = st.klass(\"Animate\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ':' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //继承user\r\n\t            var Bird = st.klass(\"Bird\", {\r\n\t                //重写say方法\r\n\t                say: function (text) {\r\n\t                    //根据名称向上找到父类原型\r\n\t                    var parent = this.getBase('Animate');\r\n\t\r\n\t                    //调用原型链方法\r\n\t                    return '[Bird]' + parent.say.call(this, text);\r\n\t                }\r\n\t            }, Animate);\r\n\t\r\n\t            var chicken = new Bird('chicken');\r\n\t            expect(chicken.say('hello')).toBe('[Bird]chicken:hello');\r\n\t        "
            ],
            "exampleTitles": [
                "获取基类对象"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 60,
            "description": "调用基类的方法",
            "itemtype": "method",
            "name": "callBase",
            "params": [
                {
                    "name": "fnName",
                    "description": "方法名称",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "基类名称",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "args",
                    "description": "方法参数数组",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "执行结果",
                "type": "Object"
            },
            "example": [
                "\t\r\n\t            var Animate = st.klass(\"Animate\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ':' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //继承user\r\n\t            var Bird = st.klass(\"Bird\", {\r\n\t                //重写say方法\r\n\t                say: function (text) {\r\n\t                    //调用基类方法\r\n\t                    return '[Bird]' + this.callBase('say', [text]);\r\n\t                }\r\n\t            }, Animate);\r\n\t\r\n\t            var chicken = new Bird('chicken');\r\n\t            expect(chicken.say('hello')).toBe('[Bird]chicken:hello');\r\n\t        ",
                "\t\r\n\t            //创建一个class\r\n\t            var User = st.klass('user', {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ',' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            //实例化一个User\r\n\t            var xiaoming = new User('小明');\r\n\t\r\n\t            //方法实例化\r\n\t            var xiaozhang = User('小张');\r\n\t\r\n\t            //多级继承例子。在多级继承中有一种场景每个子类方法都会调用父类的方法，而方法中又会使用到当前对象的属性，则问题就来了；\r\n\t            //如果是采用的parent.xxx然后传递this下的属性值过去，则没太大的问题。backbone就采用的这种。\r\n\t            //另外像base.js直接改写原始方法，将父对象封入闭包中，也无问题。只是这种限制比较大，只能调用父类的同名方法。\r\n\t            //而dojo采用的是this.parent.xxx.call(this)的方式，则就会悲剧了，死循环就来了。\r\n\t            //导致这样的原因就是将this带入parent方法后，父类又执行this.parent。而这是this则是子类的对象，那么方法就只会不停的调用parent的方法。\r\n\t            //在smartjs中klass调用父类方法由callBae这个方法来代理，同时使用指针来记录方法的执行轨迹，这样保证了从子到根的各级调用\r\n\t\r\n\t            var user2 = st.klass('user2', {\r\n\t                say: function (text) {\r\n\t                    //调用父类\r\n\t                    return this.callBase('say', [text]) + \"-lv2\";\r\n\t                }\r\n\t            }, User);\r\n\t\r\n\t            var user3 = st.klass('user3', {\r\n\t                say: function (text) {\r\n\t                    //调用父类\r\n\t                    return this.callBase('say', [text]) + \"-lv3\";\r\n\t                }\r\n\t            }, user2);\r\n\t\r\n\t            var user4 = st.klass('user4', {\r\n\t                say: function (text) {\r\n\t                    //调用父类\r\n\t                    return this.callBase('say', [text]) + \"-lv4\";\r\n\t                }\r\n\t            }, user3);\r\n\t\r\n\t            var roy = new user4('roy');\r\n\t\r\n\t            //继承路径\r\n\t            expect(roy._$inheirts + '').toBe('user4,user3,user2,user');\r\n\t\r\n\t            //依次执行到根，正确将当前的this对象的值输出\r\n\t            expect(roy.say('hello')).toBe('roy,hello-lv2-lv3-lv4');\r\n\t\r\n\t            //从3级开始执行\r\n\t            expect(roy.callBase('say', ['hello'])).toBe(\"roy,hello-lv2-lv3\");\r\n\t\r\n\t            //指定从user开始执行\r\n\t            expect(roy.callBase('say', 'user', ['hello'])).toBe(\"roy,hello\");\r\n\t\r\n\t            //上向略过2级执行\r\n\t            expect(roy.callBase('say', 2, ['hello'])).toBe(\"roy,hello-lv2\");\r\n\t\r\n\t        "
            ],
            "exampleTitles": [
                "调用父类",
                "多级继承示例"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 95,
            "description": "类扩展方法",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "prop",
                    "description": "扩展的属性和方法对象",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t            var Animate = st.klass(\"Animate\", {\r\n\t                klassInit: function (name) {\r\n\t                    this.name = name;\r\n\t                },\r\n\t                say: function (text) {\r\n\t                    return this.name + ':' + text;\r\n\t                }\r\n\t            });\r\n\t\r\n\t            var chicken = new Animate('chicken');\r\n\t\r\n\t            //扩展等同于 chicken.say = xxx\r\n\t            chicken.extend({\r\n\t                say: function (text) {\r\n\t                    return 'hello';\r\n\t                }\r\n\t            });\r\n\t\r\n\t            expect(chicken.say('hello')).toBe('hello');\r\n\t        "
            ],
            "exampleTitles": [
                "类扩展"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 252,
            "description": "使用工厂创建产品方法，但不注册到factory中",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "产品特性",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父类名称，注册到factory中产品名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回创建的产品",
                "type": "Object|klass"
            },
            "example": [
                "\t\r\n\t        //一个widget工厂\r\n\t        var widgetFactory = st.factory('wdigetfactory', {\r\n\t            //widget类型\r\n\t            type: '',\r\n\t            //widget的渲染方法\r\n\t            render: function (id) {\r\n\t                return this.type + ':' + id;\r\n\t            }\r\n\t        }, 'class');\r\n\t\r\n\t        var Tab = widgetFactory.build('Tab', {type: 'Tab'});\r\n\t\r\n\t        expect(widgetFactory.find('Tab')).toBeUndefined\r\n\t\r\n\t        var tab1 = new Tab;\r\n\t\r\n\t        expect(tab1.render('tab1')).toBe('Tab:tab1');\r\n\t    "
            ],
            "exampleTitles": [
                "oop"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 274,
            "description": "添加产品方法，注册到factory中",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "产品特性",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父类名称，注册到factory中产品名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回创建的产品",
                "type": "Object|klass"
            },
            "example": [
                "\t\r\n\t            //widget基类\r\n\t            var baseWidget = {\r\n\t                //widget类型\r\n\t                type: '',\r\n\t                //widget的渲染方法\r\n\t                render: function (id) {\r\n\t                    return this.type + ':' + id;\r\n\t                }\r\n\t            };\r\n\t\r\n\t            //一个widget工厂\r\n\t            var widgetFactory = st.factory('wdigetfactory', baseWidget);\r\n\t\r\n\t            //添加一个input\r\n\t            widgetFactory.add('input', {\r\n\t                type: 'input'\r\n\t            })\r\n\t\r\n\t            //找到添加的input\r\n\t            var input = widgetFactory.find('input');\r\n\t\r\n\t            //_$fType为注册的类型名\r\n\t            expect(input._$fType).toBe('input');\r\n\t\r\n\t            //输出\r\n\t            expect(input.render('txt')).toBe(\"input:txt\");\r\n\t        "
            ],
            "exampleTitles": [
                "oop"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 287,
            "description": "查找注册的产品",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                },
                {
                    "name": "defaultMode",
                    "description": "是否在找不到产品的时候返回默认产品",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回查找的产品",
                "type": "Object"
            },
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 305,
            "description": "将注册的产品设置成默认产品",
            "itemtype": "method",
            "name": "setDefault",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\t\r\n\t        //一个widget工厂\r\n\t        var widgetFactory = st.factory({\r\n\t            //工厂名\r\n\t            name: 'wdigetfactory',\r\n\t            //工厂类型\r\n\t            type: 'class',\r\n\t            //基类对象\r\n\t            base: {\r\n\t                //widget类型\r\n\t                type: '',\r\n\t                //widget的渲染方法\r\n\t                render: function (id) {\r\n\t                    return this.type + ':' + id;\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t\r\n\t        widgetFactory.add('Panel', {type: 'Panel'});\r\n\t\r\n\t        //将Panel设置成默认项\r\n\t        widgetFactory.setDefault('Panel')\r\n\t\r\n\t        //Tab未注册，但参数中设置了返回默认，则会返回Panel\r\n\t        var Tab = widgetFactory.find('Tab', true);\r\n\t\r\n\t        var tab1 = new Tab\r\n\t\r\n\t        expect(tab1.render('tab1')).toBe('Panel:tab1');\r\n\t    "
            ],
            "exampleTitles": [
                "oop"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 317,
            "description": "在工厂中移除注册的产品",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 333,
            "description": "执行工厂中产品的方法,不会返回结果;当工厂类型为class时，则执行的则是原型链上的方法",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "name",
                    "description": "方法名称",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "处理方法",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\t\r\n\t        var widgetFactory = st.factory('wdigetfactory', {\r\n\t            type: '',\r\n\t            render: function (id) {\r\n\t                return this.type + ':' + id;\r\n\t            }\r\n\t        });\r\n\t\r\n\t        widgetFactory.add('Panel', {\r\n\t            type: 'Panel'\r\n\t        });\r\n\t        widgetFactory.add('Tab', {\r\n\t            type: 'Tab'\r\n\t        });\r\n\t\r\n\t        var ret = '';\r\n\t        //执行每个widget的render方法；\r\n\t        widgetFactory.fire('render', ['id'], function (item, result) {\r\n\t            //this为widgetFactory；item为产品；result为render执行结果\r\n\t            ret += result + '-';\r\n\t        })\r\n\t\r\n\t        expect(ret).toBe('Panel:id-Tab:id-');\r\n\t    "
            ],
            "exampleTitles": [
                "oop"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 40,
            "description": "数据服务通用操作方法；直接执行到具体的数据服务的方法上",
            "itemtype": "method",
            "name": "operate",
            "params": [
                {
                    "name": "type",
                    "description": "操作类型；1. search; 2. update",
                    "type": "String"
                },
                {
                    "name": "op",
                    "description": "参数；具体参数同数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dsType",
                            "description": "数据服务类型",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果或者promise",
                "type": "Object|promise"
            },
            "class": "dataServices",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 58,
            "description": "执行数据服务search操作方法",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "op",
                    "description": "参数；具体参数同数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dsType",
                            "description": "数据服务类型",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "dataServices",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 68,
            "description": "执行数据服务update操作方法",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "op",
                    "description": "参数；具体参数同数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dsType",
                            "description": "数据服务类型",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "dataServices",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 84,
            "description": "查询操作接口  **[接口方法]**",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "op",
                    "description": "参数；其他具体参数同见具体数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "过滤器",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "成功之后执行的方法",
                            "type": "Object"
                        },
                        {
                            "name": "error",
                            "description": "失败之后执行的方法",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "baseDataService",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 94,
            "description": "更新操作接口 **[接口方法]**",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "op",
                    "description": "参数；其他具体参数同见具体数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "过滤器",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "更新数据",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "成功之后执行的方法",
                            "type": "Object"
                        },
                        {
                            "name": "error",
                            "description": "失败之后执行的方法",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "baseDataService",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 105,
            "description": "通用初始化参数接口 **[接口方法]**",
            "itemtype": "method",
            "name": "initOptions",
            "params": [
                {
                    "name": "op",
                    "description": "参数；其他具体参数同见具体数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "过滤器",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "成功之后执行的方法",
                            "type": "Object"
                        },
                        {
                            "name": "error",
                            "description": "失败之后执行的方法",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "参数",
                "type": "Object"
            },
            "class": "baseDataService",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 130,
            "description": "创建数据管理器",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "type",
                    "description": "数据管理器类型",
                    "type": "String"
                },
                {
                    "name": "op",
                    "description": "数据管理参数设置",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "数据管理对象",
                "type": "DataManager"
            },
            "class": "dataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 150,
            "description": "是否过滤模式; true时,使用filterBuilder组织过滤",
            "type": "{Boolean} _filterMode",
            "default": "true",
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 157,
            "description": "数据管理对象的类初始化方法；",
            "itemtype": "method",
            "name": "klassInit",
            "final": 1,
            "params": [
                {
                    "name": "op",
                    "description": "数据管理设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "初始化完成的数据管理对象",
                "type": "DataManager"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 176,
            "description": "数据管理对象的初始化接口方法 **[接口方法]**",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "op",
                    "description": "数据管理设置参数",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 182,
            "description": "使用dataManager的数据通道进行获取数据",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "conf",
                    "description": "获取设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "查询结果或者promise",
                "type": "Object|promise"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 193,
            "description": "使用dataManager的数据通道进行设置数据",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "conf",
                    "description": "设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "设置结果或者promise",
                "type": "Object|promise"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 204,
            "description": "使用dataManager内置查询(即只在dataManager内部查询，不查询dataService)接口. **[接口方法]**",
            "itemtype": "method",
            "name": "_innerSearch",
            "params": [
                {
                    "name": "conf",
                    "description": "获取设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "查询结果",
                "type": "Object"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 213,
            "description": "使用dataManager内置更新(即只在dataManager内部更新，不更新到dataService)接口. **[接口方法]**",
            "itemtype": "method",
            "name": "_innerUpdate",
            "params": [
                {
                    "name": "conf",
                    "description": "设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "设置结果",
                "type": "Object"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 222,
            "description": "检查数据是否为空;数据策略的判断空数据会根据此方法的结果来判断;不同类型的数据管理的判断也不同。\n如：object判断是否为undefined;table判断数据的长度是否大于0",
            "itemtype": "method",
            "name": "checkEmpty",
            "params": [
                {
                    "name": "data",
                    "description": "检查的数据",
                    "type": "Object"
                },
                {
                    "name": "conf",
                    "description": "设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "判断是否为空",
                "type": "[type]"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 237,
            "description": "清空数据管理内的数据的方法. **[接口方法]**",
            "itemtype": "method",
            "name": "clear",
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 243,
            "description": "设置dataService的参数,在每次使用数据通道时执行. **[接口方法]**",
            "itemtype": "method",
            "name": "setDataSerive",
            "params": [
                {
                    "name": "config",
                    "description": "设置dataService的参数",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 249,
            "description": "初始化策略参数",
            "itemtype": "method",
            "name": "initPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "策略设置",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "操作类型. \n 1. get; \n 2. set;",
                    "type": "Type"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 262,
            "description": "生成传递的参数",
            "itemtype": "method",
            "name": "buildParam",
            "params": [
                {
                    "name": "policy",
                    "description": "策略设置",
                    "type": "Object"
                },
                {
                    "name": "defPolicy",
                    "description": "默认的策略设置",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 271,
            "description": "生成策略，对策略参数进行初始化，生成传递参数，合并参数",
            "itemtype": "method",
            "name": "buildPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "策略设置",
                    "type": "Object"
                },
                {
                    "name": "defPolicy",
                    "description": "默认的策略设置",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 108,
            "description": "生成条件参数,当使用查询字符串进行构建过滤器时，根据传入的参数值生产最终的带关系和操作过滤参数",
            "itemtype": "method",
            "name": "buildCondition",
            "params": [
                {
                    "name": "params",
                    "description": "过滤的参数值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "条件参数",
                "type": "Object"
            },
            "example": [
                "\n\t\t   \t\tvar str = \"age > @age and (role = @sa or role = @coder) and project = @project\";\n\t\t\t\tvar filter = st.filterBuilder(str);\n\t\t  \n\t\t   \t\t//生成条件\n\t\t   \t\tvar conditions = filter.buildCondition({\n\t\t   \t\t\tage : 20,\n\t\t\t\t\tsa : 'sa',\n\t\t\t\t\tcoder : 'coder',\n\t\t\t\t\tproject : \"smartjs\"\n\t\t\t\t})\n\n\t\t\t\tlog(conditions);\n\n\t\t   \t\t// 生成的conditions对象\n\t\t   \t\t// {\"and\":[\n\t\t   \t\t// \t {\"field\":\"age\",\"operation\":\">\",\"param\":20},\n\t   \t\t\t// \t {\"or\":[\n\t   \t\t\t// \t\t{\"field\":\"role\",\"operation\":\"=\",\"param\":\"sa\"},\n\t   \t\t\t// \t\t{\"field\":\"role\",\"operation\":\"=\",\"param\":\"coder\"}\n\t   \t\t\t// \t ]},\n\t\t   \t\t// \t {\"field\":\"project\",\"operation\":\"=\",\"param\":\"smartjs\"}\n\t\t   \t\t// ]}"
            ],
            "class": "FilterBuilder",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 141,
            "description": "生成过滤方法",
            "itemtype": "method",
            "name": "buildFn",
            "params": [
                {
                    "name": "params",
                    "description": "过滤的参数值",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "mergeFilter",
                    "description": "需要合并的过滤条件;合并全部都为and",
                    "type": "String|function|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "过滤方法",
                "type": "Function"
            },
            "example": [
                "\n\t\tvar data = [\n\t\t\t{name : 'sa1', role : 'sa', age : 33},\n\t\t\t{name : 'sa2', role : 'sa', age : 25}\n\t\t];\n\t\t\n\t\t//创建role的过滤器\n\t\tvar filter = st.filterBuilder(\"role = @role\");\n\n\t\t//传入条件参数，并追加age的过滤\n\t\tvar filterFn = filter.buildFn({role:\"sa\",age:30},\"age > @age\");\n\n\t\tvar sa = data.filter(filterFn);\n\t\texpect(sa.length).toBe(1);\n\t\texpect(sa[0].name).toBe('sa1')\n\t\t"
            ],
            "class": "FilterBuilder",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 424,
            "description": "非判断，在判断操作符之前加入!,则将判断结果取非",
            "itemtype": "property",
            "name": "!",
            "type": "Operation",
            "example": [
                "\n\t\t//查询name不等于'roy'的数据\n\t\tvar filter = \"name != 'roy'\""
            ],
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 432,
            "description": "等于判断",
            "itemtype": "property",
            "name": "=",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 439,
            "description": "小于判断",
            "itemtype": "property",
            "name": "<",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 446,
            "description": "小于等于判断",
            "itemtype": "property",
            "name": "<=",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 453,
            "description": "大于判断",
            "itemtype": "property",
            "name": ">",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 460,
            "description": "大于等于判断",
            "itemtype": "property",
            "name": ">=",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 467,
            "description": "参数中包含数据",
            "itemtype": "property",
            "name": "in",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 474,
            "description": "数据中包含参数",
            "itemtype": "property",
            "name": "like",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 479,
            "description": "以参数为开头",
            "itemtype": "property",
            "name": "startOf",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 484,
            "description": "以参数为结尾",
            "itemtype": "property",
            "name": "endOf",
            "type": "Operation",
            "example": [
                "\n\t\t//匹配以'es'结尾的name\n\t\tvar filter = \"name endOf 'es'\";"
            ],
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 514,
            "description": "扩展判断操作符,如：'='比较操作符,name = @name",
            "itemtype": "method",
            "name": "extendOperation",
            "params": [
                {
                    "name": "operation",
                    "description": "操作名称",
                    "type": "String"
                },
                {
                    "name": "checkFn",
                    "description": "判断方法",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\t\t//添加大于操作符'>'\n\t\tst.extendOperation('>',function(data, param) {\n\t\t\t//data为数据，param为条件参数\n\t\t\t\t\treturn data > param;\n\t\t\t\t});"
            ],
            "class": "Operations",
            "module": "FilterBuilder"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:67"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:67"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:67"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:67"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:67"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:67"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:103"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:114"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:142"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:156"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:184"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:194"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:194"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:194"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:207"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:216"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:287"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:352"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:522"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:522"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:534"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:661"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:688"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:688"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:688"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:734"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:747"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:761"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:792"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:826"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:861"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:886"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:900"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:909"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:928"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\aop.js:935"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:16"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:40"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:72"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:198"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:198"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:198"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:215"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:241"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:241"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:241"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:261"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:261"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:320"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:346"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:346"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:346"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:346"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\base.js:472"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:22"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:35"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:60"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:60"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:95"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " src\\base\\oop.js:110"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:110"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:110"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:110"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:110"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:191"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:191"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:191"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:252"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:274"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:305"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\base\\oop.js:333"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\dataManager\\dataManager.js:29"
        },
        {
            "message": "unknown tag: demo",
            "line": " src\\dataManager\\dataManager.js:118"
        },
        {
            "message": "Missing item type\n是否过滤模式; true时,使用filterBuilder组织过滤",
            "line": " src\\dataManager\\dataManager.js:150"
        }
    ]
}
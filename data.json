{
    "project": {
        "name": "SmartJs",
        "version": "0.4.0",
        "url": "https://github.com/zhh77/smartjs",
        "navs": [
            {
                "name": "Home",
                "url": "https://github.com/zhh77/smartjs"
            },
            {
                "name": "Document",
                "url": "http://zhh77.github.io/smartjs/"
            },
            {
                "name": "Blog",
                "url": "http://www.cnblogs.com/zhh8077"
            },
            {
                "name": "SmartDoc",
                "url": "https://github.com/zhh77/smartDoc"
            }
        ]
    },
    "files": {
        "src\\base\\aop.js": {
            "name": "src\\base\\aop.js",
            "modules": {
                "AOP": 1
            },
            "classes": {
                "promiseEvent": 1,
                "EventArg": 1,
                "attachTrigger": 1,
                "EventArg(trigger)": 1,
                "flowController": 1,
                "EventArg(flowController)": 1
            },
            "fors": {
                "promiseEvent": 1,
                "attachTrigger": 1,
                "flowController": 1
            },
            "namespaces": {}
        },
        "src\\base\\oop.js": {
            "name": "src\\base\\oop.js",
            "modules": {
                "OOP": 1
            },
            "classes": {
                "klassBase": 1,
                "klass": 1,
                "factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\base\\smart.js": {
            "name": "src\\base\\smart.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\base\\util.js": {
            "name": "src\\base\\util.js",
            "modules": {
                "Util": 1
            },
            "classes": {
                "util": 1,
                "priorityList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\dataManager\\dataManager-table.js": {
            "name": "src\\dataManager\\dataManager-table.js",
            "modules": {
                "DataManager-Table": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\dataManager\\dataManager.js": {
            "name": "src\\dataManager\\dataManager.js",
            "modules": {
                "DataManager": 1
            },
            "classes": {
                "dataServices": 1,
                "baseDataService": 1,
                "dataManager": 1,
                "baseDataManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\dataManager\\filterBuilder.js": {
            "name": "src\\dataManager\\filterBuilder.js",
            "modules": {
                "FilterBuilder": 1
            },
            "classes": {
                "FilterBuilder": 1,
                "Operations": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "AOP": {
            "name": "AOP",
            "submodules": {},
            "classes": {
                "promiseEvent": 1,
                "EventArg": 1,
                "attachTrigger": 1,
                "EventArg(trigger)": 1,
                "flowController": 1,
                "EventArg(flowController)": 1
            },
            "fors": {
                "promiseEvent": 1,
                "attachTrigger": 1,
                "flowController": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\aop.js",
            "line": 1650,
            "description": "面向切面编程的辅助模块\n\nFeartures : \n    1. promiseEvent ：基于promise和event机制的回调管理\n    2. trigger ：对象触发器\n    3. flowController ：流程/生命周期控制器\n\nUpdate Note：\n    + 2014.8.06 ：将priorityList应用到promiseEvent中\n    + 2014.6.13 ：trigger添加属性变化监听支持\n    + 2014.6.11 ：promiseEvent添加非阻塞模式\n    + 2014.5 ：Created"
        },
        "OOP": {
            "name": "OOP",
            "submodules": {},
            "classes": {
                "klassBase": 1,
                "klass": 1,
                "factory": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\oop.js",
            "line": 329,
            "description": "面向对象思想的辅助实现模块;\n\nFeartures : \n    1. klass ：类继承；实现执行指针，类常用方法，继承路径\n    2. factory ：对象/类工厂方法；\n\nUpdate Note：\n    + 2014.6 ：Created"
        },
        "Util": {
            "name": "Util",
            "submodules": {},
            "classes": {
                "util": 1,
                "priorityList": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\base\\util.js",
            "line": 349,
            "description": "工具包模块\n\nFeartures : \n\t1. 基础公共方法\n\t2. 基础公共对象\n\nUpdate Note：\n\t+ 2014.8.06 加入priorityList\n\t+ 2014.5 ：Created"
        },
        "DataManager": {
            "name": "DataManager",
            "submodules": {
                "DataManager-Table": 1
            },
            "classes": {
                "dataServices": 1,
                "baseDataService": 1,
                "dataManager": 1,
                "baseDataManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\dataManager\\dataManager.js",
            "line": 285,
            "description": "数据管理模块\n\nFeartures : \n    1. dataServices ：数据服务接口\n    2. dataManager ：基于策略的数据管理基类\n    3. dataPolicyManager ：数据策略管理器；\n\nUpdate Note：\n    + 2014.7 ：Created"
        },
        "DataManager-Table": {
            "name": "DataManager-Table",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager-table.js",
            "line": 2,
            "description": "针对于表类型的数据进行管理\n\nFeartures : \n    1. 提供CRUD接口\n    2. 内置状态控制\n\n\nUpdate Note：\n    + 2014.7 ：Created"
        },
        "FilterBuilder": {
            "name": "FilterBuilder",
            "submodules": {},
            "classes": {
                "FilterBuilder": 1,
                "Operations": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 419,
            "description": "过滤器生成器\n\nFeartures : \n    1. 编译字符串过滤，“name = @name and (age > @age and type = @type)”，生产过滤条件参数或者过滤方法\n    2. 参数过滤，以参数的方式全部构建\"=\"的方式构建查询方法\n    3. 方法过滤\n    4. 忽略null的条件\n    5. 自定义扩展过滤操作符\n    6. 条件&参数合并\n\nUpdate Note：\n    + 2014.7 ：Created"
        }
    },
    "classes": {
        "promiseEvent": {
            "name": "promiseEvent",
            "shortname": "promiseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 67,
            "description": "基于事件和promise的回调管理，类似于jquery的callbacks，但具有结果传递，优先级，事件参数，promise控制等功能；\n默认注册的事件都是按照优先级，依次执行，无论同步还是异步；但在非阻塞模式下，则事件不会等待上一个执行完毕（异步），\n直接回依次执行，只是在最后的结果中会等待所有的事件执行完毕之后才返回",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "promiseEvent的模式，可以混用；\n    1. 默认；event模式，所有的注册的事件，执行时，第一个事件参数为e（详细说明见promiseEvent-EventArg）\n    2. 'callback' : 回调模式; 与event模式对立，执行时不会添加事件参数e\n    2. 'none' : 全部事件执行一次，即有执行动作就销毁\n    3. 'noBlock' : 非阻塞模式；",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n    //使用once模式创建promiseEvent\n    var events = st.promiseEvent(\"once\");\n\n    //添加回调\n    events.add('call1', function(e, text) {\n        return text;\n    });\n    \n    //执行事件\n    expect(events.fire('called')).toBe('called');\n    \n    var result = [];\n\n    //创建一个noBlock模式的promiseEvents;\n    var noBlockEvents = st.promiseEvent(\"noBlock\");\n\n    //第一个回调延迟100\n    noBlockEvents.add(\"c1\", function(e) {\n        //异步的promise处理\n        setTimeout(function() {\n            result.push('c1');\n            e.resolve();\n        }, 100);\n        return e.promise();\n    });\n\n    //第二个正常执行\n    noBlockEvents.add(\"c2\", function(e) {\n        result.push('c2');\n    });\n\n    //第三个回调延迟50\n    noBlockEvents.add(\"c3\", function(e) {\n        setTimeout(function() {\n            result.push('c3');\n            e.resolve();\n        }, 50);\n        return e.promise();\n    });\n\n    $.when(noBlockEvents.fire()).done(function(data) {\n        //最终执行顺序是c2-c3-c1\n        expect(result + '').toBe('c2,c3,c1');\n    });"
            ]
        },
        "EventArg": {
            "name": "EventArg",
            "shortname": "EventArg",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 337,
            "description": "promiseEvent中事件回调的EventArg(e)参数对象;通过EventArg可以对事件进行阻止冒泡、promise、事件删除还有结果传递等控制；\nEventArg针对上下文对象（比较trigger和flowController）下，具有的独立的方法；"
        },
        "attachTrigger": {
            "name": "attachTrigger",
            "shortname": "attachTrigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 619,
            "description": "给对象添加触发器功能,在目标对象上加入触发器功能，目标对象的方法就会具有方法和属性注入功能；所有注入方法使用promiseEvent管理\n目前有四种注入方式： \n1. before，前置注入，在目标方法执行之前执行；\n2. after，后置执行，在目标方法执行之后执行；\n3. round，环绕，将目标方法包装，自定义控制；\n4. error，错误，捕获reject的事件；",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "[object] 目标对象"
                },
                {
                    "name": "mode",
                    "description": "[string] 注入前置和后置所采用的promiseEvent的模式，具体见promsieEvent的add",
                    "optional": true
                },
                {
                    "name": "fnInterface",
                    "description": "；自定义接口方法；在使用attachTrigger方法后，会在target上附加一些控制方法，为了避免重名和控制对外的方法，使用fnInterface来自定义",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回附加上了trigger的对象;",
                "type": "Trigger"
            },
            "example": [
                "\n    var result = [];\n\n    var obj1 = {\n        test: function(name) {\n            result.push(name);\n        }\n    };\n\n    function injectCall(e,name){\n        result.push(name + '-after');\n    }\n\n    //给obj1对象附上触发器功能\n    st.attachTrigger(obj1);\n    \n\n    //注册前置触发方法\n    obj1.onBefore('test','beforeCall',function(e,name){\n        result.push(name + '-before');\n    });\n\n\n    //注册后置触发方法\n    obj1.on('test','afterCall',injectCall);\n\n    obj1.test('test');\n\n    expect(result.join(';')).toBe('test-before;test;test-after');\n    \n\n    //清空结果\n    result = [];\n\n    //直接初始化成trigger对象\n    var obj2 = st.attachTrigger({\n        child : {\n            test : function(name){\n                result.push(name);\n            }\n        }\n    });\n    \n    //注册后置触发方法到子对象方法\n    obj2.on('child.test','afterCall',injectCall);\n    \n    obj2.child.test('test2');\n\n    expect(result.join(';')).toBe('test2;test2-after');\n\n    \n    //定制trigger的接口方法\n     var obj3 = st.attachTrigger({\n        test: function(name) {\n            return name;\n        }\n    }, {\n        //将trigger的onBebefore方法名改成bind\n        on: \"bind\",\n        //屏蔽trigger的onBefore方法\n        onBefore: null\n    });\n    \n    //使用自定义的bind接口注册前置触发方法\n    obj3.bind('test','afterCall',function(e,name){\n        //将原方法的结果改变，然后返回\n        return e.result + '-after';\n    });\n    \n    expect(obj3.test('test3')).toBe('test3-after');\n    \n\n    result = [];\n\n    //全promise模式\n    var objPromise = st.attachTrigger({\n        test: function(name) {\n            //在原始方法中使用jquery的deferred\n            var e = $.Deferred();\n            setTimeout(function() {\n                result.push(name);\n                e.resolve();\n            }, 100);\n            return e.promise();\n        }\n    });\n\n    //前置promise\n    objPromise.onBefore('test', 'testBefore', function(e, name) {\n        setTimeout(function() {\n            result.push(name + '-before');\n            e.resolve();\n        }, 100);\n        return e.promise();\n    });\n\n    //后置promise\n    objPromise.on('test', 'testAfter', function(e, name) {\n        setTimeout(function() {\n            result.push(name + '-after');\n            e.resolve();\n        }, 100);\n        return e.promise();\n    });\n\n    $.when(objPromise.test('call')).done(function() {\n        expect(result.join(',')).toBe('call-before,call,call-after');\n    });\n"
            ]
        },
        "EventArg(trigger)": {
            "name": "EventArg(trigger)",
            "shortname": "EventArg(trigger)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 880,
            "description": "trigger下的事件参数，由EventArg扩展而来",
            "extends": "EventArg"
        },
        "flowController": {
            "name": "flowController",
            "shortname": "flowController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 1470,
            "description": "流程或者生命周期管理器。控制流程的走向，流程扩展，注入控制等等；FlowController是基于trigger封装，具有所有trigger的特性；",
            "is_constructor": 1,
            "params": [
                {
                    "name": "op",
                    "description": "参数设置 ：",
                    "type": "Object",
                    "props": [
                        {
                            "name": "flow",
                            "description": "流程对象",
                            "type": "Object"
                        },
                        {
                            "name": "order",
                            "description": "流程顺序",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "trigger",
                            "description": "trigger设置",
                            "type": "Bool|object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "mode",
                                    "description": "trigger的mode设置",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "iFace",
                                    "description": "trigger的接口方法设置",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mode",
                            "description": "流程的模式， \n    1. 默认为EventArg模式\n    2. 'simple', 简单模式不带流程中不带EventArg参数",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "返回流程控制器",
                "type": "FlowController"
            },
            "example": [
                "\n    var result = [];\n\n    //以widget简单的的生命周期为例\n    var flow = st.flowController({\n        flow: {\n            init: function(e, name, op) {\n                result.push(name,'init');\n                //input的进入buildInput流程\n                if (name === 'input')\n                    //指定进入buildInput，同时指定的参数\n                    e.next(\"buildInput\", [op.type]);\n                //进入cancel流程\n                else if (name === 'cancel')\n                    e.next('cancel');\n            },\n            buildInput: function(e, type) {\n                result.push('buildInput');\n                //返回传递结果\n                return type;\n            },\n            cancel: function(e) {\n                result.push('cancel');\n                e.end();\n            },\n            render: function(e, name, op) {\n                //判断是否存在传递结果\n                e.result && result.push(e.result);\n                result.push('render');\n            },\n            complete: function(e, name, op) {\n                result.push('complete');\n            }\n        },\n        //设定执行流程\n        order: [\"init\", \"render\", \"complete\"]\n    });\n\n    \n    flow.boot('div');\n    expect(result + '').toBe('div,init,render,complete');\n\n    //简单流程，流程中不带事件参数EventArg\n    var simpleFlow = st.flowController({\n        flow: {\n            init: function(name, op) {\n                result.push(name, 'simpleInit');\n            },\n            render: function(name, op) {\n                result.push('simpleRender');\n            },\n            complete: function(name, op) {\n                result.push('simpleComplete');\n            }\n        },\n        order: [\"init\", \"render\", \"complete\"],\n        //简单模式\n        mode: \"simple\"\n    });\n\n    result = [];\n\n    simpleFlow.boot('div');\n    expect(result + '').toBe('div,simpleInit,simpleRender,simpleComplete');\n\n\n    //异步的流程,开启trigger\n    var triggerFlow = st.flowController({\n        flow: {\n            init: function(e, name, op) {\n                //模拟异步\n                setTimeout(function() {\n                    result.push(name, 'triggerInit');\n                    e.resolve();\n                }, 100);\n                return e.promise();\n            },\n            render: function(e, name, op) {\n                result.push('triggerRender');\n            },\n            complete: function(e, name, op) {\n                result.push('triggerComplete');\n            }\n        },\n        order: [\"init\", \"render\", \"complete\"],\n        trigger: true\n    });\n\n    //在init之前注入\n    triggerFlow.onBefore(\"init\", \"initBefore\", function(e, name, op) {\n        result.push('triggerInitBefore');\n    }, \"once\");\n\n    //在init之后注入异步\n    triggerFlow.on(\"init\", \"initAfter\", function(e, name, op) {\n        setTimeout(function() {\n            result.push('triggerInitAfter');\n            e.resolve();\n        }, 100);\n        return e.promise();\n    }, \"once\");\n\n    result = [];\n\n    //使用when来捕获异步的流程执行结果\n    $.when(triggerFlow.boot(\"div\")).done(function() {\n        expect(result + '').toBe('triggerInitBefore,div,triggerInit,triggerInitAfter,triggerRender,triggerComplete');\n    });"
            ]
        },
        "EventArg(flowController)": {
            "name": "EventArg(flowController)",
            "shortname": "EventArg(flowController)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AOP",
            "namespace": "",
            "file": "src\\base\\aop.js",
            "line": 1650,
            "description": "flowController下的事件参数，由EventArg(trigger)扩展而来，具有EventArg(trigger)的所有特性;\n其中stop方法为结束当前流程节点；",
            "extends": "EventArg(trigger)"
        },
        "klassBase": {
            "name": "klassBase",
            "shortname": "klassBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOP",
            "namespace": "",
            "file": "src\\base\\oop.js",
            "line": 17,
            "description": "klass的基类对象"
        },
        "klass": {
            "name": "klass",
            "shortname": "klass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOP",
            "namespace": "",
            "file": "src\\base\\oop.js",
            "line": 190,
            "description": "js类创建，具有执行指针功能(解决了多级继承域对象的问题)\n\n此外提供两种全局扩展方式： \n    1. 基于原形链的基类扩展，使用st.conf('oop-KlassBase')，可以取到基类对象进行扩展\n    2. 在类初始化时，对实例化的对象进行扩展，可以使用st.onKlassInit对象进行添加扩展方法。st.onKlassInit 是promiseEvent对象，st.onKlassInit(obj,config);",
            "is_constructor": 1,
            "extends": "klassBase",
            "params": [
                {
                    "name": "name",
                    "description": "类名称",
                    "type": "String"
                },
                {
                    "name": "prop",
                    "description": "类的属性和方法",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父类",
                    "type": "Klass|object|function",
                    "optional": true
                },
                {
                    "name": "config",
                    "description": "扩展参数",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回类",
                "type": "Klass"
            },
            "example": [
                "\n    //创建一个class\n    var User = st.klass('user',{\n        klassInit:function(name){\n            this.name = name;\n        },\n        say: function(text) {\n            return this.name + ',' + text;\n        }\n    });\n\n    //实例化一个User\n    var xiaoming = new User('小明');\n    \n    //方法实例化\n    var xiaozhang = User('小张');\n\n\n\n    \n    //多级继承例子。在多级继承中有一种场景每个子类方法都会调用父类的方法，而方法中又会使用到当前对象的属性，则问题就来了；\n    //如果是采用的parent.xxx然后传递this下的属性值过去，则没太大的问题。backbone就采用的这种。\n    //另外像base.js直接改写原始方法，将父对象封入闭包中，也无问题。只是这种限制比较大，只能调用父类的同名方法。\n    //而dojo采用的是this.parent.xxx.call(this)的方式，则就会悲剧了，死循环就来了。\n    //导致这样的原因就是将this带入parent方法后，父类又执行this.parent。而这是this则是子类的对象，那么方法就只会不停的调用parent的方法。\n    //在smartjs中klass调用父类方法由callBae这个方法来代理，同时使用指针来记录方法的执行轨迹，这样保证了从子到根的各级调用\n\n    var user2 = st.klass('user2', {\n        say: function(text) {\n            //调用父类\n            return this.callBase('say', [text]) + \"-lv2\";\n        }\n    }, User);\n\n    var user3 = st.klass('user3', {\n        say: function(text) {\n            //调用父类\n            return this.callBase('say', [text]) + \"-lv3\";\n        }\n    }, user2);\n\n    var user4 = st.klass('user4', {\n        say: function(text) {\n            //调用父类\n            return this.callBase('say', [text]) + \"-lv4\";\n        }\n    }, user3);\n\n    var roy = new user4('roy');\n    \n    //继承路径\n    expect(roy._$inheirts + '').toBe('user4,user3,user2,user');\n\n    //依次执行到根，正确将当前的this对象的值输出\n    expect(roy.say('hello')).toBe('roy,hello-lv2-lv3-lv4');\n\n    //从3级开始执行\n    expect(roy.callBase('say', ['hello'])).toBe(\"roy,hello-lv2-lv3\");\n\n    //指定从user开始执行\n    expect(roy.callBase('say', 'user', ['hello'])).toBe(\"roy,hello\");\n\n    //上向略过2级执行\n    expect(roy.callBase('say', 2, ['hello'])).toBe(\"roy,hello-lv2\");"
            ]
        },
        "factory": {
            "name": "factory",
            "shortname": "factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOP",
            "namespace": "",
            "file": "src\\base\\oop.js",
            "line": 329,
            "description": "factory并不只是指的是工厂模式。在factory要求定义一个基础对象，这个对象可以是基类，也可以是模板对象或者是接口。然后factory就已此基础对象为基础，其他添加或者创建的对象，继承或者是复制基础对象的属性和方法。factory在提供一系列方法来对这些对象做控制。\n       factory经过简单的处理可以实现工厂、外观、模板等设计模式。",
            "is_constructor": 1,
            "extends": "klass",
            "params": [
                {
                    "name": "name",
                    "description": "工厂名称",
                    "type": "String"
                },
                {
                    "name": "base",
                    "description": "基类对象，所有在工厂中添加的对象都以base为基础",
                    "type": "Object"
                },
                {
                    "name": "proto",
                    "description": "工厂的扩展属性和方法对象",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "工厂的类型； \n1. 默认:类实例化后的对象；\n2. class：类对象，未实例化；\n3. merge：对象复制合并",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "initDefault",
                    "description": "是否将base设置成为默认的对象；当使用factory.get找不到对象时返回默认对象",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回创建的工厂对象",
                "type": "Factory"
            },
            "example": [
                "\n          //widget基类\n           var baseWidget = {\n               //widget类型\n               type: '',\n               //widget的渲染方法\n               render: function(id) {\n                   return this.type + ':' + id;\n               }\n           };\n\n           //一个widget工厂\n           var widgetFactory = st.factory('wdigetfactory', baseWidget);\n\n           //添加一个input\n           widgetFactory.add('input', {\n               type: 'input'\n           })\n\n           //找到添加的input\n           var input = widgetFactory.find('input');\n           \n           //_$fType为注册的类型名\n           expect(input._$fType).toBe('input');\n\n           //输出\n           expect(input.render('txt')).toBe(\"input:txt\");\n\n\n           //添加一个number类型的input\n           var num = widgetFactory.add('number', {\n               type: 'input[number]'\n               //指定父类为input\n           }, 'input')\n\n           //输出\n           expect(num.render('txtNum')).toBe(\"input[number]:txtNum\");\n\n\n\n           // 类模式，注册的对象都是类的方式，使用需要初始化\n           var f1 = st.factory({\n               name: 'classMode',\n               //设置class类型\n               type: 'class',\n               base: {\n                   klassInit: function(name) {\n                       this.name = name;\n                   }\n\n               }\n           });\n\n           var c1 = f1.add('c1', {\n               type: 'c1'\n           });\n\n           expect(c1.fn).toBeDefined();\n\n           //需要初始化\n           var c = new c1('class1');\n           expect(c.type).toBe(\"c1\");\n           expect(c.name).toBe(\"class1\");\n\n\n\n           //merget mode\n            var f2 = st.factory({\n               name: 'copyMode',\n               //设置merge类型\n               type: 　'merge',\n               //设置默认模式\n               initDefault: true,\n               base: {\n                   name: 'copy',\n                   project: {\n                       name: 'smartjs'\n                   }\n               }\n           })\n\n           var c = f2.add('c1', {\n               name: 'c1',\n               project: {\n                   role: 'pm'\n               }\n           });\n           \n           expect(f2.find().name).toBe(\"copy\");\n           expect(c.name).toBe(\"c1\");\n           expect(c.project.name).toBe(\"smartjs\");\n           expect(c.project.role).toBe(\"pm\");\n"
            ]
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\base\\util.js",
            "line": 16,
            "description": "util常用公共方法"
        },
        "priorityList": {
            "name": "priorityList",
            "shortname": "priorityList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\base\\util.js",
            "line": 349,
            "description": "权重列表,根据权重的由大到小进入插入。\n具有两种item模式：\n\t1. 默认，正常item，手动设置priority\n\t2. self，读取item的priority属性",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "item模式",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "defaultPriority",
                    "description": "item模式",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar list = st.priorityList(),\n                result = [];\n\n            //添加项\n            list.add(1).add(0).add(10, 10).add(5, 5).add(-1, -1);\n\n            //10为第一个\n            expect(list.at(0)).toBe(10);\n\n\n            //按优先级大到小循环\n            list.each(function(item) {\n                result.push(item);\n            })\n\n            expect(result + '').toBe('10,5,1,0,-1');"
            ]
        },
        "dataServices": {
            "name": "dataServices",
            "shortname": "dataServices",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 29,
            "description": "数据服务管理；定义了数据服务的接口和通用操作方法；不能直接使用，必须创建具体类型的数据服务； \n数据服务的定义就比较广了，可以是具体的对象方式locaStorage，IndexDB，或者是一些行为ajax，comet，websocket；也可以是根据业务规则定义的rest，cache等；",
            "is_constructor": 1,
            "extends": "factory",
            "example": [
                "\n\t\t//cache数组\n\t  \t\tvar _cache = [];\n\n\t\t\t//注册cache的数据服务\n     st.dataServices.add(\"cache\", {\n         //实现search接口方法\n         search: function(op) {\n             var result, filter = op.filter;\n             //过滤数据\n             result = filter ? _cache.filter(filter) : _cache;\n\n             //执行成功之后的方法\n             op.success && op.success(result);\n         },\n         //实现update接口方法\n         update: function(op) {\n             var filter = op.filter,\n                 //测试使用，只更新第一条匹配数据\n                 data = $.isArray(data) ? data[0] : data;\n\n             if (filter) {\n                 //查找数据进行更新\n                 $.each(_cache, function(i, item) {\n                     if (filter(item)) {\n                         _cache[i] = data;\n                         return false;\n                     }\n                 })\n             } else {\n                 _cache = op.data || [];\n             }\n           \n             op.success && op.success(op.data);\n         }\n     });\n\n     //更新cache的数据\n     st.dataServices.update({\n         dsType: 'cache',\n         data: [{\n             name: 'user1',\n             age: 20\n         }, {\n             name: 'user2',\n             age: 30\n         }],\n         success: function(result) {\n             expect(_cache.length).toBe(2);\n         }\n     });\n\n     //查询server的数据\n     st.dataServices.search({\n         dsType: 'cache',\n         filter : function(data){\n\t\t\t\t\treturn data.name === 'user1'\n         },\n         success: function(result) {\n             expect(result.length).toBe(1);\n             expect(result[0].age).toBe(20);\n         }\n     });"
            ]
        },
        "baseDataService": {
            "name": "baseDataService",
            "shortname": "baseDataService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 141,
            "description": "数据服务基类"
        },
        "dataManager": {
            "name": "dataManager",
            "shortname": "dataManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 180,
            "description": "数据管理器工厂； 更多数据管理的例子见smartjs其他数据管理项",
            "is_constructor": 1,
            "extends": "factory",
            "example": [
                "\n\t  \t\t//添加一个简单的table类型的数据管理\n     st.dataManager.add(\"Table\", {\n         init: function() {\n             this._data = [];\n         },\n         //dm内置查询\n         _innerSearch: function(conf) {\n             return conf.filter ? this._data.filter(conf.filter) : this._data;\n         },\n         //dm内置更新\n         _innerUpdate: function(conf) {\n             var isUpdate, _data = this._data,\n                 data = conf.data,\n                 updateData;\n\n             if (conf.filter) {\n                 updateData = $.isArray(data) ? data[0] : data;\n                 //筛选数据\n                 _data.forEach(function(item, i) {\n                     if (conf.filter(item)) {\n                         _data[i] = updateData;\n                         isUpdate = true;\n                         return false;\n                     }\n                 })\n                 isUpdate || _data.push(updateData);\n             } else {\n                 this._data = data || [];\n             }\n             return data;\n         },\n         //判断数据是否为空\n         checkEmpty: function(data, conf) {\n             return data === undefined || data.length === 0;\n         },\n         //清空数据\n         clear: function() {\n             this._data = [];\n         }\n     });\n\n     //创建一个tabel的manager\n     var dm1 = st.dataManager.create(\"Table\");\n\n     //找不到匹配的数据，则插入新数据\n     dm1._innerUpdate({\n         data: {\n             name: 'user3',\n             age: 10\n         },\n         //方法过滤器\n         filter: function(user) {\n             return user.name == 'user3';\n         }\n     });\n     expect(dm1._data.length).toBe(1);\n     expect(dm1._data[0].name).toBe('user3');\n\n     //更新数据\n     dm1._innerUpdate({\n         data: {\n             name: 'user3',\n             age: 40\n         },\n         //方法过滤器\n         filter: function(user) {\n             return user.name == 'user3';\n         }\n     });\n\n     //查询数据\n     var result = dm1._innerSearch({\n         //方法过滤器\n         filter: function(user) {\n             return user.name == 'user3';\n         }\n     });\n     expect(result.length).toBe(1);\n     expect(result[0].age).toBe(40);"
            ]
        },
        "baseDataManager": {
            "name": "baseDataManager",
            "shortname": "baseDataManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataManager",
            "namespace": "",
            "file": "src\\dataManager\\dataManager.js",
            "line": 285,
            "description": "数据管理器基类"
        },
        "FilterBuilder": {
            "name": "FilterBuilder",
            "shortname": "FilterBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "FilterBuilder",
            "namespace": "",
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 25,
            "description": "过滤生成器对象；可以使用：条件字符串；参数；方法来构建； \n条件字符串的过滤操作见[Operations](Operations.html)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "三种类型： \n1. {string}, 查询字符串\n2. {object}, 参数对象\n3. {function}, 过滤方法",
                    "type": "String|function|object"
                }
            ],
            "return": {
                "description": "返回过滤生成器对象",
                "type": "FilterBuilder"
            },
            "example": [
                "\n\t\t//定义数据\n\t\t\tvar data = [\n\t\t\t\t\t{name: \"roy\",age: 30,role: \"sa\",project: \"smartjs\"},\n\t\t\t\t\t{name: \"roy\",age: 30,role: \"coder\",project: \"smartdoc\"},\n\t\t\t \t\t{name: \"coder1\", age: 20, role: \"coder\", project: \"smartjs\"}\n\t\t\t];\n\n\t\t//查询字符串,{age > @age}用{}包含的条件表示当@age为null的时候，忽略此条件\n\t\tvar str = \"{age > @age} and (role = @sa or role = @coder) and {project = @project}\";\n\t\t\t\n\t\t\t//创建字符串过滤器\n\t\t\tvar strFilter = st.filterBuilder(str);\n\t\t\t\n\t\t\t//生成过滤方法\n\t\t\tvar fnFilterCoder = strFilter.buildFn({\n\t\t\t\tcoder : 'coder',\n\t\t\t});\n\n\t\t\t//过滤所有coder\n\t\t\tvar coders = data.filter(fnFilterCoder);\n\n\t\t\texpect(coders.length).toBe(2);\n\t\t\texpect(coders[0].name).toBe('roy');\n\t\t\texpect(coders[1].name).toBe('coder1');\n\n\t\t\t//再次生成smartjs项目年纪大于20的coder或sa\n\t\t\tvar filterFn = strFilter.buildFn({\n\t\t\t\tage : 20,\n\t\t\t\tcoder : 'coder',\n\t\t\t\tsa : 'sa',\n\t\t\t\tproject : 'smartjs'\n\t\t\t});\n\t\t\t\n\t\t\tvar member = data.filter(filterFn);\n\t\t\texpect(member.length).toBe(1);\n\t\t\texpect(member[0].name).toBe('roy');\n\t\t\t\n\t\t\t\n\t\t\t//创建过滤器\n\t\t\tvar paramFilter = st.filterBuilder();\n\n\t\t\t//根据参数创建过滤方法\n\t\t\tvar filterFn2 = paramFilter.buildFn({\n\t\t\t\tname : 'coder1'\n\t\t\t});\n\n\t\t\tvar coder1 = data.filter(filterFn2);\n\n\t\t\texpect(coder1.length).toBe(1);\n\t\t\texpect(coder1[0].name).toBe('coder1');\n\t\t\t"
            ]
        },
        "Operations": {
            "name": "Operations",
            "shortname": "Operations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "FilterBuilder",
            "namespace": "",
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 419,
            "description": "针对过滤器条件字符串的条件过滤操作；预设了基础操作；另外可以通过<code>st.extendOperation(operation,checkFn)</code>进行扩展和重写"
        }
    },
    "classitems": [
        {
            "file": "src\\base\\aop.js",
            "line": 143,
            "description": "清空所有事件回调",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                "\n    var events = st.promiseEvent();\n\n    //添加回调\n    events.add('call1', function(e, text) {});\n    events.add('call2', function(e, text) {});\n    \n    //回调事件总数为2\n    expect(events.len()).toBe(2);\n\n    //清除events下面注册的事件\n    events.clear();\n    \n    //回调事件总数为0\n    expect(events.len()).toBe(0);\n"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 169,
            "description": "添加事件回调方法",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "事件回调名",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "事件回调方法",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "权重;预设为0，可以通过配置调整",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "mode",
                    "description": "回调模式：\"once\":执行一次",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n    //callbak 模式下添加事件\n    var calls = st.promiseEvent(\"callback\"),\n        ret = [];\n\n    //没有eventArg参数\n    calls.add(\"c1\", function(name) {\n        ret.push(name + '-c1');\n    }).add(\"c2\", function(name) {\n        ret.push(name + '-c2');\n    });\n    calls.fire('test');\n    expect(ret.join(';')).toBe('test-c1;test-c2');\n\n    \n    //标准模式\n    var events = st.promiseEvent(),\n        result = [];\n\n    //注册事件\n    events.add('call1', function(e, text) {\n        result.push('call1');\n    });\n\n    //自定义priority注册事件\n    events.add('call2', function(e, text) {\n        result.push('call2');\n    },100);\n\n    //单once模式注册\n    events.add('call3', function(e, text) {\n        result.push('call3');\n    },'once');\n\n    //所有设置\n    events.add('call4', function(e, text) {\n        result.push('call4');\n    },50,'once');\n    \n    //返回promise\n    events.add(\"promiseCall\", function(e, text) {\n        //异步的方法\n        setTimeout(function() {\n            result.push('promiseCall');\n            e.resolve();\n        },0);\n        return e.promise();\n    },20);\n    \n    //回调中如果存在promise需要,$.when来获取结果\n    $.when(events.fire('test')).done(function(){\n        expect(result.join('-')).toBe('call2-call4-promiseCall-call1-call3');\n    });\n    \n\n    //result传递\n    var resultEvents = st.promiseEvent();\n    resultEvents.add(\"c1\", function(e) {\n        //使用return传递结果\n        return \"c1\";\n    }).add(\"c2\", function(e) {\n        //e.result是由c1返回过来的值; 使用事件参数e的resolve传递\n        setTimeout(function() {\n            e.resolve(e.result + \"-c2\");\n        },0);\n        return e.promise();\n\n    }).add(\"c3\", function(e) {\n        //e.result是由c1返回过来的值\n        return e.result + \"-c3\";\n    });\n    \n    $.when(resultEvents.fire()).done(function(ret){\n        expect(ret).toBe('c1-c2-c3');\n    })"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 272,
            "description": "删除事件回调方法",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "事件回调名",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var events = st.promiseEvent();\n\n    //注册事件\n    events.add('call1', function(e, text) {});\n\n    //删除事件\n    events.remove('call1');\n\n    expect(events.len()).toBe(0);\n    "
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 296,
            "description": "根据上下文对象执行回调;fire方法的增强",
            "itemtype": "method",
            "name": "fireWith",
            "params": [
                {
                    "name": "context",
                    "description": "上下文对象",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                },
                {
                    "name": "argHandle",
                    "description": "参数处理方法，可以对eventarg进行修改；例如：argHandle(e)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回执行结果",
                "type": "Object|promise"
            },
            "example": [
                "\n    var events = st.promiseEvent(),\n    target = {\n        name : 'target'\n    };\n\n     //注册事件\n     events.add('call1', function(e, text) {\n        return this.name + '-' + text + '-' + e.extend();\n     });\n\n     //使用fireWith执行\n     var result = events.fireWith(target,['test'],function(e){\n        //扩展事件参数；只会在这一次的fire中生效\n        e.extend = function(){\n            return 'extend';\n        }\n     });\n\n     expect(result).toBe('target-test-extend');"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 343,
            "description": "停止所有后续事件执行",
            "itemtype": "method",
            "name": "stopPropagation",
            "chainable": 1,
            "example": [
                "\n    var events = st.promiseEvent(),\n        result = [];\n\n    events.add(\"c1\", function(e) {\n        //阻止冒泡\n        e.stopPropagation();\n        result.push(\"c1\");\n    })\n    .add(\"c2\", function() {\n        result.push(\"c2\");\n    });\n\n    //只执行了c1\n    events.fire();\n\n    expect(result.join('-')).toBe('c1')"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 369,
            "description": "完成契约",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "result",
                    "description": "返回结果",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    var pCalls = st.promiseEvent();\n\n    pCalls.add(\"c1\", function(e, name) {\n        //延迟100ms\n        setTimeout(function() {\n            //完成promise,并返回结果\n            e.resolve(name + ',resolve!');\n        }, 100);\n        //返回promise\n        return e.promise();\n    });\n    \n    //使用when来监控promiseEvent的执行，使用done来处理执行完毕的方法\n    $.when(pCalls.fire(\"call\")).done(function(data) {\n        expect(data).toBe('call,resolve!');\n    });\n"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 397,
            "description": "拒绝契约，在任何一个事件中reject都会停止所有后续promiseEvent的执行",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "err",
                    "description": "拒绝参数",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    var pCalls = st.promiseEvent();\n\n    pCalls.add(\"c1\", function(e, name) {\n        //延迟100ms\n        setTimeout(function() {\n            //拒绝promise,并返回结果\n            e.reject(name + ',reject!');\n        }, 100);\n\n        //返回promise\n          return e.promise();\n    });\n\n    //使用when来监控promiseEvent的执行，使用fail捕获reject\n    $.when(pCalls.fire(\"call\")).fail(function(data) {\n        expect(data).toBe('call,reject!');\n    });"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 423,
            "description": "删除当前事件；与promiseEvent.add的'once'模式，不同在于可以手动进行控制",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "example": [
                "\n    var calls = st.promiseEvent();\n    \n    calls.add(\"onceTest\", function(e) {\n        //删除\"onceTest\"这个事件；\n        e.remove();\n    });\n    //执行后才会触发删除\n    calls.fire();\n\n    //\"onceTest\"已经不在calls中\n    expect(calls.has(\"onceTest\")).toBe(false);"
            ],
            "class": "EventArg",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 505,
            "description": "判断是否存在事件回调",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "事件回调名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否存在",
                "type": "Boolean"
            },
            "example": [
                " \n     var calls = st.promiseEvent();\n            \n    calls.add(\"call1\", function(e) {});\n\n    //判断是否注册了\"call1\"的event\n    expect(calls.has(\"call1\")).toBeTruthy();"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 535,
            "description": "获取注册的事件长度/数",
            "itemtype": "method",
            "name": "len",
            "return": {
                "description": "注册的事件长度/数",
                "type": "Number"
            },
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 544,
            "description": "执行回调",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                },
                {
                    "name": "argHandle",
                    "description": "参数处理方法，可以对eventarg进行修改；例如：argHandle(e)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回执行结果",
                "type": "Object"
            },
            "example": [
                "\n    //once模式创建\n    var calls = st.promiseEvent(\"once\");\n\n    //注册call1\n    calls.add('call1', function(e, text) {\n        return text;\n    })\n\n    //执行call1，返回called\n    expect(calls.fire('called')).toBe('called');\n    \n    var result = '';\n\n    //使用eventArg控制\n    calls.add(\"c1\", function(e) {\n        //阻止后续回调\n        e.stopPropagation();\n        result += \"c1\";\n    })\n    .add(\"c2\", function() {\n        result += \"c2\";\n    });\n\n    //只执行了c1\n    calls.fire();\n    expect(result).toBe('c1');\n\n\n    //promise模式下\n    calls.add(\"c1\", function(e, name) {\n        setTimeout(function() {\n            e.resolve(name + '-c1');\n        }, 100);\n        return e.promise();\n    });\n    \n    //使用when来监控返回的result\n    $.when(calls.fire(\"call\")).done(function(ret) {\n        expcet(ret).toBe('call-c1');\n    }.fail(function(error){\n\n    }));"
            ],
            "class": "promiseEvent",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 885,
            "description": "阻止默认的方法执行；",
            "itemtype": "method",
            "name": "preventDefault",
            "chainable": 1,
            "example": [
                "\n    var result = [];\n\n    var obj = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    obj.onBefore('test', 'testBefore', function(e, name) {\n        result.push(name + '-before1');\n        //阻止前置后续的事件&阻止默认方法\n        e.stopPropagation().preventDefault();\n    });\n\n    obj.onBefore('test', 'testAfter', function(e, name) {\n        result.push(name + '-before2');\n    });\n\n    obj.on('test', 'testBefore2', function(e, name) {\n        result.push(name + '-after');\n    });\n\n    obj.test('call');\n\n    //最终输出前置call-before1和后置\n    expect(result.join(',')).toBe('call-before1,call-after');"
            ],
            "class": "EventArg(trigger)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 922,
            "description": "停止当前方法执行和后置所有事件；在属性监听时，则阻止赋值；",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n    var result = [];\n\n    var obj = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    obj.onBefore('test', 'testBefore', function(e, name) {\n        result.push(name + '-before1');\n        //停止执行\n        e.stop();\n    });\n\n    obj.onBefore('test', 'testBefore2', function(e, name) {\n        result.push(name + '-before2');\n    });\n\n    obj.on('test', 'testAfter', function(e, name) {\n        result.push(name + '-after');\n    });\n\n    obj.test('call');\n\n    //最终只输入前置call-before1\n    expect(result.join(',')).toBe('call-before1');"
            ],
            "class": "EventArg(trigger)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1075,
            "description": "注册手动的触发的Handler",
            "itemtype": "method",
            "name": "onHandler",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 手动触发器名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                },
                {
                    "name": "priority",
                    "description": "[number] 权重设置，同PrmiseEvent",
                    "optional": true
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var obj = st.attachTrigger({\n        test: function(text) {\n            //手动执行handler\n            return this.fireHandler('handler', [text, \"run\"]);\n        }\n    });\n\n    //注册handler1\n    obj.onHandler('handler', 'handler1', function(e, text, state) {\n        //返回结果\n        return text + '-' + state + '-' + 'handler1';\n    })\n\n    //注册handler2\n    obj.onHandler('handler', 'handler2', function(e, text, state) {\n        //接受handler1结果\n        return e.result + '-' + 'handler2';\n    })\n\n    expect(obj.test('test')).toBe('test-run-handler1-handler2');"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1111,
            "description": "执行手动触发的Handler",
            "itemtype": "method",
            "name": "fireHandler",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 手动触发器名称"
                },
                {
                    "name": "args",
                    "description": "[array] 执行参数数组"
                }
            ],
            "return": {
                "description": "[object] 执行结果"
            },
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1122,
            "description": "注册[后置的]事件方法;注册后置和对象注入",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "目标方法或者属性名称;[object]类型时为对象注入",
                    "type": "String|object"
                },
                {
                    "name": "trName",
                    "description": "注册事件方法的名称|属性名称；对象注入模式下，会自动拼接成trName-[名称|属性名]-[注入方式]",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "注册事件方法;对象注入模式下，[object]类型才会生效",
                    "type": "Function|object"
                },
                {
                    "name": "priority",
                    "description": "[number] 权重设置，同PrmiseEvent",
                    "optional": true
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var result = [], obj = st.attachTrigger({\n        //方法\n        test: function(name) {\n            result.push(name);\n        },\n        //子对象\n        child : {\n            test : function(name){\n                result.push(name);\n            }\n        },\n        //属性\n        prop : 1\n    });\n\n    //注册前置\n    obj.onBefore(\"test\", \"addBefore\", function(e, name) {\n        result.push('before-' + name);\n    })\n    //注册后置\n    .on(\"test\", \"addAfter\", function(e, name) {\n        result.push('after-' + name);\n    });\n\n    //执行test方法\n    obj.test('bind');\n    //前后置正确触发\n    expect(result.join(',')).toBe(\"before-bind,bind,after-bind\");\n    \n    result = [];\n\n\n    //支持子对象方法注册\n    obj.onBefore(\"child.test\", \"addBefore\", function(e, name) {\n        result.push('before-' + name);\n    }).on(\"child.test\", \"addAfter\", function(e, name) {\n        result.push('after-' + name);\n    });\n\n\n    //属性监听只有before，after两种方法注入类型，不支持round环绕模式。\n    //before：主要使用在做值变化的控制，比如是否需要更新，或者改变更新的值等等。\n    //after：在after则是无法干预值的变化，因此只是做监听使用；\n\n    \n    //注册属性监听，回调方法中有三个参数,事件参数e；更新的值value；原来的值oldValue\n     obj.onBefore('prop', 'testBefore', function(e, value,oldValue) {\n        result.push(value + '-before-' + oldValue);\n    });\n    \n    obj.on('prop', 'testAfter', function(e, value,oldValue) {\n        result.push(value + '-after-' + oldValue);\n    });\n    \n    expect(obj.prop).toBe(1);\n\n    //属性赋值\n    obj.prop = 2;\n\n    //输出前后置监听\n    expect(result.join(',')).toBe('2-before-1,2-after-1');\n    expect(obj.prop).toBe(2);\n    \n\n    //前置中干预赋值\n    obj.onBefore('prop', 'testBefore', function(e, value) {\n        //停止方法，阻止赋值行为\n        e.stop();\n    });\n\n    obj.prop = 4;\n    //结果未变化\n    expect(obj.prop).toBe(2);\n\n\n    result = [];\n\n    //对象注入例子\n    var objInject = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    //对象注入\n    objInject.on({\n        //简单的注入后置方法\n        test : function(e,name){\n            result.push('after');\n        },\n        //注入前置&注入参数设置\n        'test before' : {\n            //注入方法\n            fn : function(e,name){\n                result.push('before');\n            },\n            //注入权重\n            priority : 100,\n            //注入模式\n            mode : 'once'\n        }\n    },\"onObject\");\n\n    objInject.test('call');\n    expect(result.join(',')).toBe('before,call,after');"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1257,
            "description": "注册前置的事件方法",
            "itemtype": "method",
            "name": "onBefore",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                },
                {
                    "name": "priority",
                    "description": "[number] 权重设置，同PrmiseEvent",
                    "optional": true
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n    //见on方法"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1273,
            "description": "注册环绕触发事件",
            "itemtype": "method",
            "name": "onRound",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var result = [];\n\n     var obj3 = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    //注册环绕事件，事件方法参数第一为fn为原方法，后面的为执行参数\n    obj3.onRound(\"test\", \"roundTest\", function(fn, name) {\n        result.push('before');\n        //执行原有方法\n        fn(name);\n        result.push('after');\n    });\n\n    obj3.test('round');\n    expect(result.join(',')).toBe(\"before,round,after\");"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1304,
            "description": "注册错误捕获事件，当执行reject的时候触发",
            "itemtype": "method",
            "name": "onError",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string] 注册事件方法的名称"
                },
                {
                    "name": "fn",
                    "description": "[function] 注册事件方法"
                },
                {
                    "name": "mode",
                    "description": "[string] 加入的事件模式，同PrmiseEvent",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var testError = st.attachTrigger({\n        test: function(name) {\n            var e = $.Deferred();\n            setTimeout(function() {\n                //拒绝契约\n                 e.reject('reject');\n            }, 100);\n            return e.promise();\n        }\n    });\n    //注册错误捕获事件\n    testError.onError(\"test\",\"triggerError\",function(err,name){\n          expect(err).toBe('reject');\n          expect(name).toBe('call');\n    });\n\n    testError.test('call');"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1335,
            "description": "注销注册的后置事件方法",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string|array] 注册事件方法的名称：\n        1. 空为清除所有\n        2. 字符串为单个\n        3. 数组为多个",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var result = [];\n\n    var obj = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    //注册后置testAfter1\n    obj.on('test', 'testAfter1', function(e, name) {\n        result.push('after1');\n    });\n\n    //注册后置testAfter2\n    obj.on('test', 'testAfter2', function(e, name) {\n        result.push('after2');\n    });\n\n    //注销单个后置\n    obj.off('test', 'testAfter1');\n\n    obj.test('test');\n\n    expect(result.join('-')).toBe('test-after2');"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1375,
            "description": "注销注册的前置事件方法",
            "itemtype": "method",
            "name": "offBefore",
            "params": [
                {
                    "name": "name",
                    "description": "[string] 目标方法或者属性名称"
                },
                {
                    "name": "trName",
                    "description": "[string|array] 注册事件方法的名称：\n        1. 空为清除所有\n        2. 字符串为单个\n        3. 数组为多个",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n    var result = [];\n\n    var obj = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    //注册前置testBefore\n    obj.onBefore('test', 'testBefore', function(e, name) {\n        result.push('before1');\n    });\n\n    //注册前置testBefore2\n    obj.onBefore('test', 'testBefore2', function(e, name) {\n        result.push('before2');\n    });\n\n    //注销多个前置\n    obj.offBefore('test', ['testBefore', 'testBefore2']);\n\n    obj.test('test');\n\n    expect(result.join('-')).toBe('test');"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1415,
            "description": "扩展对象；（在使用触发器注册后，原始方法不会直接在目标对象下，因此使用obj.test = xx的方式来扩展会替换到所有的注册事件）",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "prop",
                    "description": "[object] 目标方法或者属性名称"
                }
            ],
            "chainable": 1,
            "example": [
                "\n     var obj = st.attachTrigger({\n        test: function(name) {\n            result.push(name);\n        }\n    });\n\n    //注册后置testAfter\n    obj.on('test', 'testAfter', function(e, name) {\n        result.push('after');\n    });\n\n    //扩展替换test\n    obj.extend({\n        test : function(name){\n            result.push(name + ':extend')\n        }\n    });\n    \n    obj.test('test');\n\n    expect(result.join('-')).toBe('test:extend-after2');"
            ],
            "class": "attachTrigger",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1606,
            "description": "已手动设定流程开始的节点启动流程",
            "itemtype": "method",
            "name": "bootWithStart",
            "params": [
                {
                    "name": "start",
                    "description": "流程开始的节点",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "返回执行结果或者promise（异步）",
                "type": "Object|promise"
            },
            "example": [
                "\n         \n               var result = [];\n\n               var flow = st.flowController({\n                   flow: {\n                       init: function(e, name, op) {\n                           result.push(name,'init');\n                       },\n                       render: function(e, name, op) {\n                           //判断是否存在传递结果\n                           e.result && result.push(e.result);\n                           result.push('render');\n                       },\n                       complete: function(e, name, op) {\n                           result.push('complete');\n                       }\n                   },\n                   //设定执行流程\n                   order: [\"init\", \"render\", \"complete\"]\n               });\n\n               //从render阶段开始构建div\n               flow.bootWithStart('render', [\"div\"]);\n\n               //略过了render阶段\n               expect(result + '').toBe('render,complete');"
            ],
            "class": "flowController",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1657,
            "description": "结束流程。无论是注册的事件方法还是流程方法全部结束",
            "itemtype": "method",
            "name": "end",
            "chainable": 1,
            "example": [
                "\n     var result = [];\n     \n     var triggerFlow = st.flowController({\n         flow: {\n             init: function(e, name, op) {\n                 //模拟异步\n                 setTimeout(function() {\n                     result.push(name, 'triggerInit');\n                     e.resolve();\n                 }, 100);\n                 return e.promise();\n             },\n             render: function(e, name, op) {\n                 result.push('triggerRender');\n             },\n             complete: function(e, name, op) {\n                 result.push('triggerComplete');\n             }\n         },\n         order: [\"init\", \"render\", \"complete\"],\n         trigger: true\n     });\n\n     triggerFlow.onBefore(\"init\", \"initBefore\", function(e, name, op) {\n         setTimeout(function() {\n             //停止流程\n             e.end().resolve();\n             result.push('initBefore');\n         }, 100);\n         return e.promise();\n     }, \"once\");\n\n     $.when(triggerFlow.boot(\"div\")).done(function() {\n         //执行了注入事件initBefore后停止流程\n         expect(result + '').toBe('initBefore');\n     })"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1707,
            "description": "拒绝契约同时设置流程状态为失败，结束流程",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "comment",
                    "description": "拒绝的说明或参数",
                    "type": "Object"
                }
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1715,
            "description": "手动指定下一个流程，（指定的流程可以不在order配置中）",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "nextNode",
                    "description": "下一个流程名称",
                    "type": "String"
                },
                {
                    "name": "pass",
                    "description": "下个流程执行完毕略过的流程数（相对于order）",
                    "type": "Number"
                },
                {
                    "name": "args",
                    "description": "下个流程的参数，只在该流程节点有效，在之后就会恢复成原始参数，如想改变后续参数，请使用changeArgs方法",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "example": [
                "\n   var result = [];\n\n     //以widget简单的的生命周期为例\n     var flow = st.flowController({\n         flow: {\n             init: function(e, name, op) {\n                 result.push(name,'init');\n                 //input的进入buildInput流程\n                 if (name === 'input')\n                     //指定进入buildInput，同时指定的参数\n                     e.next(\"buildInput\", [op.type]);\n                 //进入cancel流程\n                 else if (name === 'cancel')\n                     e.next('cancel');\n             },\n             buildInput: function(e, type) {\n                 result.push('buildInput');\n                 //返回传递结果\n                 return type;\n             },\n             cancel: function(e) {\n                 result.push('cancel');\n                 e.end();\n             },\n             render: function(e, name, op) {\n                 //判断是否存在传递结果\n                 e.result && result.push(e.result);\n                 result.push('render');\n             },\n             complete: function(e, name, op) {\n                 result.push('complete');\n             }\n         },\n         //设定执行流程\n         order: [\"init\", \"render\", \"complete\"]\n     });\n\n     \n     flow.boot('input',{\n         type: 'text'\n     });\n\n     expect(result + '').toBe('input,init,buildInput,text,render,complete');"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1777,
            "description": "改变后续流程的执行参数",
            "itemtype": "method",
            "name": "changeArgs",
            "params": [
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array"
                }
            ],
            "example": [
                "\n    var result = [];\n\n     var flow = st.flowController({\n         flow: {\n             init: function(e, name) {\n                 result.push(name,'init');\n                 //改变下个流程的方法参数\n                 e.changeArgs(['text']);\n             },\n             render: function(e,type) {\n                 result.push('render',type);\n                 //恢复原始参数\n                 e.recoverArgs();\n             },\n             complete: function(e, name) {\n                 result.push('complete',name);\n             }\n         },\n         //设定执行流程\n         order: [\"init\", \"render\", \"complete\"]\n     });\n\n     flow.boot(\"input\");\n\n     expect(result + '').toBe('input,init,render,text,complete,input');"
            ],
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1809,
            "description": "恢复原始执行参数，下个流程中生效，与changeArgs方法对应",
            "itemtype": "method",
            "name": "recoverArgs",
            "chainable": 1,
            "class": "EventArg(flowController)",
            "module": "AOP"
        },
        {
            "file": "src\\base\\aop.js",
            "line": 1887,
            "description": "启动流程，",
            "itemtype": "method",
            "name": "boot",
            "params": [
                {
                    "name": "流程参数",
                    "description": "",
                    "type": "Argument"
                }
            ],
            "return": {
                "description": "返回执行结果或者promise（异步）",
                "type": "Object|promise"
            },
            "class": "flowController",
            "module": "AOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 23,
            "description": "调用原型链方法",
            "itemtype": "method",
            "name": "callProto",
            "params": [
                {
                    "name": "name",
                    "description": "需要执行的原型链方法名",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回执行结果"
            },
            "example": [
                "\n    var Animate = st.klass(\"Animate\", {\n        klassInit: function(name) {\n            this.name = name;\n        },\n        say: function(text) {\n            return this.name + ':' + text;\n        }\n    });\n\n    var chicken = new Animate('chicken');\n    chicken.say = function(text){\n        //调用原型链方法\n        return '[Bird]' + this.callProto('say',[text]);\n    };\n\n    expect(chicken.say('hello')).toBe('[Bird]chicken:hello');"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 52,
            "description": "获取基类对象",
            "itemtype": "method",
            "name": "getBase",
            "params": [
                {
                    "name": "baseName",
                    "description": "基类名称,不设置则返回父类",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回基类"
            },
            "example": [
                "\n    var Animate = st.klass(\"Animate\", {\n            klassInit: function(name) {\n                this.name = name;\n            },\n            say: function(text) {\n                return this.name + ':' + text;\n            }\n        });\n    \n    //继承user\n    var Bird = st.klass(\"Bird\", {\n        //重写say方法\n        say: function(text) {\n            //根据名称向上找到父类原型\n            var parent =  this.getBase('Animate');\n            \n            //调用原型链方法\n            return '[Bird]' + parent.say.call(this,text);\n        }\n    }, Animate);\n    \n    var chicken = new Bird('chicken');\n    expect(chicken.say('hello')).toBe('[Bird]chicken:hello');\n"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 101,
            "description": "调用基类的方法",
            "itemtype": "method",
            "name": "callBase",
            "params": [
                {
                    "name": "fnName",
                    "description": "方法名称",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "基类名称",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "args",
                    "description": "方法参数数组",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "执行结果",
                "type": "Object"
            },
            "example": [
                "\n     var Animate = st.klass(\"Animate\", {\n             klassInit: function(name) {\n                 this.name = name;\n             },\n             say: function(text) {\n                 return this.name + ':' + text;\n             }\n         });\n     \n     //继承user\n     var Bird = st.klass(\"Bird\", {\n         //重写say方法\n         say: function(text) {\n              //调用基类方法\n              return '[Bird]' + this.callBase('say',[text]);\n         }\n     }, Animate);\n     \n     var chicken = new Bird('chicken');\n     expect(chicken.say('hello')).toBe('[Bird]chicken:hello');\n"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 156,
            "description": "类扩展方法",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "prop",
                    "description": "扩展的属性和方法对象",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\n     var Animate = st.klass(\"Animate\", {\n         klassInit: function(name) {\n             this.name = name;\n         },\n         say: function(text) {\n             return this.name + ':' + text;\n         }\n     });\n\n     var chicken = new Animate('chicken');\n\n     //扩展等同于 chicken.say = xxx\n     chicken.extend({\n         say : function(text){\n             return 'hello';\n         }\n     });\n\n     expect(chicken.say('hello')).toBe('hello');"
            ],
            "class": "klassBase",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 480,
            "description": "使用工厂创建产品方法，但不注册到factory中",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "产品特性",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父类名称，注册到factory中产品名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回创建的产品",
                "type": "Object|klass"
            },
            "example": [
                "\n     //一个widget工厂\n     var widgetFactory = st.factory('wdigetfactory', {\n         //widget类型\n         type: '',\n         //widget的渲染方法\n         render: function(id) {\n             return this.type + ':' + id;\n         }\n     },'class');\n\n     var Tab = widgetFactory.build('Tab',{type : 'Tab'});\n\n     expect(widgetFactory.find('Tab')).toBeUndefined();\n     \n     var tab1 = new Tab();\n\n     expect(tab1.render('tab1')).toBe('Tab:tab1');\n"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 520,
            "description": "添加产品方法，注册到factory中",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "产品特性",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父类名称，注册到factory中产品名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回创建的产品",
                "type": "Object|klass"
            },
            "example": [
                "\n     //一个widget工厂\n     var widgetFactory = st.factory({\n         //工厂名\n         name : 'wdigetfactory',\n         //工厂类型\n         type: 'class',\n         //基类对象  \n         base : {\n             //widget类型\n             type: '',\n             //widget的渲染方法\n             render: function(id) {\n                 return this.type + ':' + id;\n             }\n         } \n     });\n\n     var Tab = widgetFactory.add('Tab',{type : 'Tab'});\n\n     expect(widgetFactory.find('Tab')).toBeDefined();\n     \n     var tab1 = new Tab();\n\n     expect(tab1.render('tab1')).toBe('Tab:tab1');\n"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 558,
            "description": "查找注册的产品",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                },
                {
                    "name": "defaultMode",
                    "description": "是否在找不到产品的时候返回默认产品",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回查找的产品",
                "type": "Object"
            },
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 576,
            "description": "将注册的产品设置成默认产品",
            "itemtype": "method",
            "name": "setDefault",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n    \n     //一个widget工厂\n     var widgetFactory = st.factory({\n         //工厂名\n         name : 'wdigetfactory',\n         //工厂类型\n         type: 'class',\n         //基类对象  \n         base : {\n             //widget类型\n             type: '',\n             //widget的渲染方法\n             render: function(id) {\n                 return this.type + ':' + id;\n             }\n         } \n     });\n\n     widgetFactory.add('Panel',{type : 'Panel'});\n\n     //将Panel设置成默认项\n     widgetFactory.setDefault('Panel')\n     \n     //Tab未注册，但参数中设置了返回默认，则会返回Panel\n     var Tab = widgetFactory.find('Tab',true);\n\n     var tab1 = new Tab();\n     \n     expect(tab1.render('tab1')).toBe('Panel:tab1');\n"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 618,
            "description": "在工厂中移除注册的产品",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "产品名称",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\oop.js",
            "line": 634,
            "description": "执行工厂中产品的方法,不会返回结果;当工厂类型为class时，则执行的则是原型链上的方法",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "name",
                    "description": "方法名称",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "执行参数",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "处理方法",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n     \n     //一个widget工厂\n     var widgetFactory = st.factory({\n         //工厂名\n         name : 'wdigetfactory',\n         //工厂类型\n         type: 'class',\n         //基类对象  \n         base : {\n             //widget类型\n             type: '',\n             //widget的渲染方法\n             render: function(id) {\n                 return this.type + ':' + id;\n             }\n         } \n     });\n\n     widgetFactory.add('Panel',{type : 'Panel'});\n     widgetFactory.add('Tab',{type : 'Tab'});\n     \n     var ret = '';\n     //执行每个widget的render方法；\n     widgetFactory.fire('render',['id'],function(item,result){\n         //this为widgetFactory；item为产品；result为render执行结果\n         ret += result + '-';\n     })\n\n     expect(ret).toBe('Panel:id-Tab:id-');"
            ],
            "class": "factory",
            "module": "OOP"
        },
        {
            "file": "src\\base\\smart.js",
            "line": 3,
            "description": "NOTE: smartjs入口 \nFeatures：\n    1.smartjs模块定义方法，兼容requirejs和seajs\n    2.conf配置管理方法\n\nUpdate Note：\n    2014.6 ：Created\n\nNeeds：util",
            "class": "util",
            "module": "OOP"
        },
        {
            "file": "src\\base\\util.js",
            "line": 31,
            "description": "将argument转换成array",
            "itemtype": "method",
            "name": "sliceArgs",
            "params": [
                {
                    "name": "args",
                    "description": "argument对象",
                    "type": "Function"
                },
                {
                    "name": "[start",
                    "description": "= 0]  开始位置",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[array] 返回转换的数组"
            },
            "example": [
                "\n\t function test() {\n\t \t//从第二个参数开发返回\n        return st.sliceArgs(arguments, 1);\n    }\n    expect(test(1, 2, 3, 4).join(',')).toBe('2,3,4');"
            ],
            "class": "util",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 68,
            "description": "在目标对象方法中注入方法，返回结果",
            "itemtype": "method",
            "name": "injectFn",
            "params": [
                {
                    "name": "target",
                    "description": "注入的目标对象",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "注入的方法名",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "注入方法",
                    "type": "Function"
                },
                {
                    "name": "before",
                    "description": "是否前置注入，默认后置",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "stopOnFalse",
                    "description": "是否开启返回值为false停止后续执行",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " \n\tvar result = [],\n        target = {\n            test: function(arr) {\n                arr.push(\"test\");\n            }\n        };\n\n        \n    function fn(arr) {\n        arr.push(\"inject\");\n    }\n    \n    //向target注入方法fn\n    st.injectFn(target, \"test\", fn);\n\n    target.test(result);\n\n    //结果执行注入函数fn\n    expect(result + '').toBe('test,inject');"
            ],
            "class": "util",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 105,
            "description": "合并方法，返回结果",
            "itemtype": "method",
            "name": "mergeFn",
            "params": [
                {
                    "name": "fn",
                    "description": "目标方法",
                    "type": "Function"
                },
                {
                    "name": "mergeFn",
                    "description": "合并方法，合并的方法始终在后执行",
                    "type": "Function"
                },
                {
                    "name": "stopOnFalse",
                    "description": "是否开启返回值为false停止后续执行",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[function] 返回合并之后的新方法"
            },
            "example": [
                "\n\tvar result = [],\n        fn1, fn2, fn3;\n\n    //合并方法1\n    fn1 = function(arr) {\n        arr.push(\"fn1\");\n        return false;\n    }\n    //合并方法2\n    fn2 = function(arr) {\n        arr.push(\"fn2\");\n    }\n\n    //将fn1和fn2合并成一个新方法fn3，并开启stopOnFalse\n    fn3 = st.mergeFn(fn1, fn2, true);\n\n    fn3(result);\n    //最终因为fn1执行返回false，fn2不执行，\n    expect(result + '').toBe('fn1');"
            ],
            "class": "util",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 179,
            "description": "合并默认数据方法,将obj中不空的内容从defObj中复制",
            "itemtype": "method",
            "name": "mix",
            "params": [
                {
                    "name": "deep",
                    "description": "是否深度合并",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "obj",
                    "description": "合并对象",
                    "type": "Function"
                },
                {
                    "name": "defObj",
                    "description": "默认对象",
                    "type": "Function"
                },
                {
                    "name": "exclude",
                    "description": "排除合并的设置",
                    "type": "Array|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "[function] 返回合并之后的对象；如obj不为空时返回obj，否则返回新对象"
            },
            "example": [
                "\n\tvar person = {\n\t            name: \"piter\",\n\t            age: 10,\n\t            child: [{\n\t                name: 'lily'\n\t            }]\n\t        };\n\n\t        var obj = {\n        name: 'a'\n    };\n\n    //根据person的数据进行合并\n    st.mix(obj, person);\n\n    //child被复制\n    expect(obj.child).toBeDefined();\n\n    //age被复制\n    expect(obj.age).toBe(10);\n\n    //name不为null，未被复制\n    expect(obj.name).toBe('a');"
            ],
            "class": "util",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 256,
            "description": "获取对象的属性或方法，支持命名空间方式获取",
            "itemtype": "method",
            "name": "getObj",
            "params": [
                {
                    "name": "target",
                    "description": "目标对象",
                    "type": "Object"
                },
                {
                    "name": "ns",
                    "description": "属性名称或者相对于target的路径，使用\".\"进行分割",
                    "type": "String"
                },
                {
                    "name": "root",
                    "description": "是否从根开始，默认从target子开始；从根开始则忽略ns的第一级",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回获取的属性或者方法"
            },
            "example": [
                "\n\t\t\tvar user = {\n\t\t\t\tname : \"tony\",\n\t\t\t\tproject : {\n\t\t\t\t\tname : \"SmartJS\"\n\t\t\t\t}\n\t\t\t};\n\n\t//等同于user.project.name\n\texpect(st.getObj(user,'project.name')).toBe(\"SmartJS\");\n\t\t\t\n\t\t\t//等同于user.name；\"u.\"回被忽略\n\t\t\texpect(st.getObj(user,'u.name',true)).toBe(\"tony\");"
            ],
            "class": "util",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 288,
            "description": "设置对象的属性或方法，支持命名空间方式设置",
            "itemtype": "method",
            "name": "setObj",
            "params": [
                {
                    "name": "target",
                    "description": "目标对象",
                    "type": "Object"
                },
                {
                    "name": "ns",
                    "description": "属性名称或者相对于target的路径，使用\".\"进行分割",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "设置的值",
                    "type": "Object"
                },
                {
                    "name": "mode",
                    "description": "值设置的方式,目标对象和值都为object类型有效，默认为替换；\"merge\" : 合并默认值；\"extend\" : extend方式合并值；",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "root",
                    "description": "是否从根开始，默认从target子开始；从根开始则忽略ns的第一级",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "[object] 返回获取的属性或者方法"
            },
            "example": [
                "\n\t\t\tvar user = {};\n\t//等同于 user.name = 'roy'\n\tst.setObj(user,'name','roy');\n\n\t\t\t//等同于 user.project.name = 'smartjs';\n\tst.setObj(user,'project.name','smartjs');\n\n\t//根模式，等同于 st.mix(user.project,{name:'smartjs'});\n\tst.setObj(user,'project',{name:'smartjs'},\"merge\");\n\t\t\t\n\t\t\t//混入模式\n\t\t\tst.setObj(user, \"project1\", {\n        name: \"tony\",\n        status: 'coding'\n    }, 'mix');\n\n\t\t\tlog(user);\n\n\t\t\t//合并模式\n\t\t\tst.setObj(user, \"project1\", {\n        name: \"amy\",\n        status: 'testing'\n    }, 'merge');\n\n\t\t\tlog(user);"
            ],
            "class": "util",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 387,
            "description": "执行回调",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "添加对象",
                    "type": "Object"
                },
                {
                    "name": "priority",
                    "description": "权重",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n\tvar list = st.priorityList(),\n    result = [];\n\n\t            //添加项\n\t            list.add(1).add(0);\n\n\t            //根据priority添加项\n\t            list.add(10, 10).add(5, 5).add(-1, -1);\n\t\t\t\t\n\t\t\t\t//按优先级大到小循环\n\t            list.each(function(item) {\n\t                result.push(item);\n\t            })\n\n\texpect(result + '').toBe('10,5,1,0,-1');"
            ],
            "class": "priorityList",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 452,
            "description": "执行回调",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "filter",
                    "description": "过滤函数，返回值：\n 1. {boolean}：是否匹配；\n 2. 'break' : 结束匹配；\n 3. 'done' : 完成匹配",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                " \n\tvar list = st.priorityList();\n\n\tlist.add({id : 1});\n\tlist.add({id : 2});\n\n\t           \t//删除 item为1的项\n\t            list.remove(function(item){\n\t                if(item.id === 1)\n\t                \t//结束匹配\n\t                    return \"done\";\n\t            })\n\n\t\t\t\texpect(list.len()).toBe(1);"
            ],
            "class": "priorityList",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 500,
            "description": "循环列表方法，默认根据priority大到小",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "desc",
                    "description": "是否降序，即根据priority由小到大",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "循环处理函数",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                " \n\t\t\t\tvar list = st.priorityList(),\n\t                result = [];\n\n\t            //添加项\n\t            list.add(1).add(0).add(10, 10).add(5, 5).add(-1, -1);\n\n\t\t\t\t //按优先级大到小循环\n\t            list.each(function(item) {\n\t                result.push(item);\n\t            })\n\t            expect(result + '').toBe('10,5,1,0,-1');\n\t\t\t\t\n\t\t\t\tresult = [];\n\n\t\t\t\t//按优先级小到大循环\n\t            list.each(true,function(item) {\n\t                result.push(item);\n\t            })\n\t            expect(result + '').toBe('-1,0,1,5,10');"
            ],
            "class": "priorityList",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 556,
            "description": "根据序号获取item",
            "itemtype": "method",
            "name": "at",
            "params": [
                {
                    "name": "index",
                    "description": "序号",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回item",
                "type": "Object"
            },
            "class": "priorityList",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 566,
            "description": "清除所有项",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "priorityList",
            "module": "Util"
        },
        {
            "file": "src\\base\\util.js",
            "line": 576,
            "description": "获取列表长度",
            "itemtype": "method",
            "name": "len",
            "return": {
                "description": "列表长度",
                "type": "Number"
            },
            "class": "priorityList",
            "module": "Util"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 102,
            "description": "数据服务通用操作方法；直接执行到具体的数据服务的方法上",
            "itemtype": "method",
            "name": "operate",
            "params": [
                {
                    "name": "type",
                    "description": "操作类型；1. search; 2. update",
                    "type": "String"
                },
                {
                    "name": "op",
                    "description": "参数；具体参数同数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dsType",
                            "description": "数据服务类型",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果或者promise",
                "type": "Object|promise"
            },
            "class": "dataServices",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 120,
            "description": "执行数据服务search操作方法",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "op",
                    "description": "参数；具体参数同数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dsType",
                            "description": "数据服务类型",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "dataServices",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 130,
            "description": "执行数据服务update操作方法",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "op",
                    "description": "参数；具体参数同数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dsType",
                            "description": "数据服务类型",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "dataServices",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 146,
            "description": "查询操作接口  **[接口方法]**",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "op",
                    "description": "参数；其他具体参数同见具体数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "过滤器",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "成功之后执行的方法",
                            "type": "Object"
                        },
                        {
                            "name": "error",
                            "description": "失败之后执行的方法",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "baseDataService",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 156,
            "description": "更新操作接口 **[接口方法]**",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "op",
                    "description": "参数；其他具体参数同见具体数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "过滤器",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "更新数据",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "成功之后执行的方法",
                            "type": "Object"
                        },
                        {
                            "name": "error",
                            "description": "失败之后执行的方法",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "操作结果",
                "type": "Object"
            },
            "class": "baseDataService",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 167,
            "description": "通用初始化参数接口 **[接口方法]**",
            "itemtype": "method",
            "name": "initOptions",
            "params": [
                {
                    "name": "op",
                    "description": "参数；其他具体参数同见具体数据服务",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "过滤器",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "成功之后执行的方法",
                            "type": "Object"
                        },
                        {
                            "name": "error",
                            "description": "失败之后执行的方法",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "参数",
                "type": "Object"
            },
            "class": "baseDataService",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 270,
            "description": "创建数据管理器",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "type",
                    "description": "数据管理器类型",
                    "type": "String"
                },
                {
                    "name": "op",
                    "description": "数据管理参数设置",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "数据管理对象",
                "type": "DataManager"
            },
            "class": "dataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 290,
            "description": "是否过滤模式; true时,使用filterBuilder组织过滤",
            "type": "{Boolean} _filterMode",
            "default": "true",
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 297,
            "description": "数据管理对象的类初始化方法；",
            "itemtype": "method",
            "name": "klassInit",
            "final": 1,
            "params": [
                {
                    "name": "op",
                    "description": "数据管理设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "初始化完成的数据管理对象",
                "type": "DataManager"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 316,
            "description": "数据管理对象的初始化接口方法 **[接口方法]**",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "op",
                    "description": "数据管理设置参数",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 322,
            "description": "使用dataManager的数据通道进行获取数据",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "conf",
                    "description": "获取设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "查询结果或者promise",
                "type": "Object|promise"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 333,
            "description": "使用dataManager的数据通道进行设置数据",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "conf",
                    "description": "设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "设置结果或者promise",
                "type": "Object|promise"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 344,
            "description": "使用dataManager内置查询(即只在dataManager内部查询，不查询dataService)接口. **[接口方法]**",
            "itemtype": "method",
            "name": "_innerSearch",
            "params": [
                {
                    "name": "conf",
                    "description": "获取设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "查询结果",
                "type": "Object"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 353,
            "description": "使用dataManager内置更新(即只在dataManager内部更新，不更新到dataService)接口. **[接口方法]**",
            "itemtype": "method",
            "name": "_innerUpdate",
            "params": [
                {
                    "name": "conf",
                    "description": "设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "设置结果",
                "type": "Object"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 362,
            "description": "检查数据是否为空;数据策略的判断空数据会根据此方法的结果来判断;不同类型的数据管理的判断也不同。\n如：object判断是否为undefined;table判断数据的长度是否大于0",
            "itemtype": "method",
            "name": "checkEmpty",
            "params": [
                {
                    "name": "data",
                    "description": "检查的数据",
                    "type": "Object"
                },
                {
                    "name": "conf",
                    "description": "设置参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "判断是否为空",
                "type": "[type]"
            },
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 377,
            "description": "清空数据管理内的数据的方法. **[接口方法]**",
            "itemtype": "method",
            "name": "clear",
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 383,
            "description": "设置dataService的参数,在每次使用数据通道时执行. **[接口方法]**",
            "itemtype": "method",
            "name": "setDataSerive",
            "params": [
                {
                    "name": "config",
                    "description": "设置dataService的参数",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 389,
            "description": "初始化策略参数",
            "itemtype": "method",
            "name": "initPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "策略设置",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "操作类型. \n 1. get; \n 2. set;",
                    "type": "Type"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 402,
            "description": "生成传递的参数",
            "itemtype": "method",
            "name": "buildParam",
            "params": [
                {
                    "name": "policy",
                    "description": "策略设置",
                    "type": "Object"
                },
                {
                    "name": "defPolicy",
                    "description": "默认的策略设置",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\dataManager.js",
            "line": 411,
            "description": "生成策略，对策略参数进行初始化，生成传递参数，合并参数",
            "itemtype": "method",
            "name": "buildPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "策略设置",
                    "type": "Object"
                },
                {
                    "name": "defPolicy",
                    "description": "默认的策略设置",
                    "type": "Object"
                }
            ],
            "class": "baseDataManager",
            "module": "DataManager"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 108,
            "description": "生成条件参数,当使用查询字符串进行构建过滤器时，根据传入的参数值生产最终的带关系和操作过滤参数",
            "itemtype": "method",
            "name": "buildCondition",
            "params": [
                {
                    "name": "params",
                    "description": "过滤的参数值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "条件参数",
                "type": "Object"
            },
            "example": [
                "\n\t\t   \t\tvar str = \"age > @age and (role = @sa or role = @coder) and project = @project\";\n\t\t\t\tvar filter = st.filterBuilder(str);\n\t\t  \n\t\t   \t\t//生成条件\n\t\t   \t\tvar conditions = filter.buildCondition({\n\t\t   \t\t\tage : 20,\n\t\t\t\t\tsa : 'sa',\n\t\t\t\t\tcoder : 'coder',\n\t\t\t\t\tproject : \"smartjs\"\n\t\t\t\t})\n\n\t\t\t\tlog(conditions);\n\n\t\t   \t\t// 生成的conditions对象\n\t\t   \t\t// {\"and\":[\n\t\t   \t\t// \t {\"field\":\"age\",\"operation\":\">\",\"param\":20},\n\t   \t\t\t// \t {\"or\":[\n\t   \t\t\t// \t\t{\"field\":\"role\",\"operation\":\"=\",\"param\":\"sa\"},\n\t   \t\t\t// \t\t{\"field\":\"role\",\"operation\":\"=\",\"param\":\"coder\"}\n\t   \t\t\t// \t ]},\n\t\t   \t\t// \t {\"field\":\"project\",\"operation\":\"=\",\"param\":\"smartjs\"}\n\t\t   \t\t// ]}"
            ],
            "class": "FilterBuilder",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 141,
            "description": "生成过滤方法",
            "itemtype": "method",
            "name": "buildFn",
            "params": [
                {
                    "name": "params",
                    "description": "过滤的参数值",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "mergeFilter",
                    "description": "需要合并的过滤条件;合并全部都为and",
                    "type": "String|function|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "过滤方法",
                "type": "Function"
            },
            "example": [
                "\n\t\tvar data = [\n\t\t\t{name : 'sa1', role : 'sa', age : 33},\n\t\t\t{name : 'sa2', role : 'sa', age : 25}\n\t\t];\n\t\t\n\t\t//创建role的过滤器\n\t\tvar filter = st.filterBuilder(\"role = @role\");\n\n\t\t//传入条件参数，并追加age的过滤\n\t\tvar filterFn = filter.buildFn({role:\"sa\",age:30},\"age > @age\");\n\n\t\tvar sa = data.filter(filterFn);\n\t\texpect(sa.length).toBe(1);\n\t\texpect(sa[0].name).toBe('sa1')\n\t\t"
            ],
            "class": "FilterBuilder",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 424,
            "description": "非判断，在判断操作符之前加入!,则将判断结果取非",
            "itemtype": "property",
            "name": "!",
            "type": "Operation",
            "example": [
                "\n\t\t//查询name不等于'roy'的数据\n\t\tvar filter = \"name != 'roy'\""
            ],
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 432,
            "description": "等于判断",
            "itemtype": "property",
            "name": "=",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 439,
            "description": "小于判断",
            "itemtype": "property",
            "name": "<",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 446,
            "description": "小于等于判断",
            "itemtype": "property",
            "name": "<=",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 453,
            "description": "大于判断",
            "itemtype": "property",
            "name": ">",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 460,
            "description": "大于等于判断",
            "itemtype": "property",
            "name": ">=",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 467,
            "description": "参数中包含数据",
            "itemtype": "property",
            "name": "in",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 474,
            "description": "数据中包含参数",
            "itemtype": "property",
            "name": "like",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 479,
            "description": "以参数为开头",
            "itemtype": "property",
            "name": "startOf",
            "type": "Operation",
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 484,
            "description": "以参数为结尾",
            "itemtype": "property",
            "name": "endOf",
            "type": "Operation",
            "example": [
                "\n\t\t//匹配以'es'结尾的name\n\t\tvar filter = \"name endOf 'es'\";"
            ],
            "class": "Operations",
            "module": "FilterBuilder"
        },
        {
            "file": "src\\dataManager\\filterBuilder.js",
            "line": 514,
            "description": "扩展判断操作符,如：'='比较操作符,name = @name",
            "itemtype": "method",
            "name": "extendOperation",
            "params": [
                {
                    "name": "operation",
                    "description": "操作名称",
                    "type": "String"
                },
                {
                    "name": "checkFn",
                    "description": "判断方法",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\t\t//添加大于操作符'>'\n\t\tst.extendOperation('>',function(data, param) {\n\t\t\t//data为数据，param为条件参数\n\t\t\t\t\treturn data > param;\n\t\t\t\t});"
            ],
            "class": "Operations",
            "module": "FilterBuilder"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " src\\base\\oop.js:190"
        },
        {
            "message": "Missing item type\nNOTE: smartjs入口 \nFeatures：\n    1.smartjs模块定义方法，兼容requirejs和seajs\n    2.conf配置管理方法\n\nUpdate Note：\n    2014.6 ：Created\n\nNeeds：util",
            "line": " src\\base\\smart.js:3"
        },
        {
            "message": "Missing item type\n是否过滤模式; true时,使用filterBuilder组织过滤",
            "line": " src\\dataManager\\dataManager.js:290"
        }
    ]
}